{
	"allow_skew": "0",
	"author": "nobody",
	"cron_schedule": "35 3 * * *",
	"defer_scheduled_searchable_idxc": "0",
	"description": "Http Event Collector (HEC) Inputs Summary Index Gen Job From REST - [Daily - 03:35]",
	"disabled": "0",
	"dispatch.allow_partial_results": "1",
	"dispatch.auto_cancel": "0",
	"dispatch.auto_pause": "0",
	"dispatch.buckets": "0",
	"dispatch.earliest_time": "-1s",
	"dispatch.index_earliest": "",
	"dispatch.index_latest": "",
	"dispatch.indexedRealtime": "",
	"dispatch.indexedRealtimeMinSpan": "",
	"dispatch.indexedRealtimeOffset": "",
	"dispatch.latest_time": "now",
	"dispatch.lookups": "1",
	"dispatch.max_count": "500000",
	"dispatch.max_time": "0",
	"dispatch.rate_limit_retry": "0",
	"dispatch.reduce_freq": "10",
	"dispatch.rt_backfill": "0",
	"dispatch.rt_maximum_span": "",
	"dispatch.sample_ratio": "1",
	"dispatch.spawn_process": "1",
	"dispatch.time_format": "%FT%T.%Q%:z",
	"dispatch.ttl": "600",
	"dispatchAs": "owner",
	"eai:acl.app": "insights_app_splunk",
	"eai:acl.can_change_perms": "1",
	"eai:acl.can_list": "1",
	"eai:acl.can_share_app": "1",
	"eai:acl.can_share_global": "1",
	"eai:acl.can_share_user": "0",
	"eai:acl.can_write": "1",
	"eai:acl.modifiable": "1",
	"eai:acl.owner": "nobody",
	"eai:acl.perms.read": "*",
	"eai:acl.perms.write": "['admin', 'power', 'sc_admin']",
	"eai:acl.removable": "0",
	"eai:acl.sharing": "app",
	"embed.enabled": "0",
	"is_scheduled": "0",
	"is_visible": "1",
	"max_concurrent": "1",
	"precalculate_required_fields_for_alerts": "1",
	"published": "",
	"realtime_schedule": "1",
	"request.ui_dispatch_app": "",
	"request.ui_dispatch_view": "",
	"restart_on_searchpeer_add": "1",
	"run_n_times": "0",
	"run_on_startup": "0",
	"schedule_as": "auto",
	"schedule_priority": "default",
	"schedule_window": "auto",
	"skip_scheduled_realtime_idxc": "0",
	"splunk_server": "TheNeusse",
	"target": "saved/searches",
	"title": "splunk_rest_data_inputs_http_sh_summary_data_genr",
	"updated": "1969-12-31T16:00:00-08:00",
	"vsid": "",
	"workload_pool": "",
	"search": 
| rest /servicesNS/-/-/data/inputs/http `setup_all_servers_rest` 
| rename eai:acl.* AS * | rename eai:* AS * 
| rename index AS index_name , sourcetype AS sourcetype_name, source AS source_name 
| eval token_name = substr('title', 8) , useACK = case(useACK="true", "1", useACK="false", "0", true(), useACK) , useACK = if(isnull(useACK), "0", useACK) 
| fields splunk_server app title token_name token disabled index_name indexes source_name sourcetype_name useACK 
| join splunk_server type=left [| rest /servicesNS/-/-/properties/inputs/http/dedicatedIoThreads `setup_all_servers_rest` 
    | rename value as dedicatedIoThreads 
    | fields splunk_server dedicatedIoThreads] 
| join splunk_server type=left [| rest/servicesNS/-/-/properties/inputs/http/enableSSL `setup_all_servers_rest` 
    | rename value as enableSSL 
    | fields splunk_server enableSSL] 
| join splunk_server type=left [| rest /servicesNS/-/-/properties/inputs/http/port `setup_all_servers_rest` 
    | rename value as port 
    | fields splunk_server port] 
| join splunk_server type=left [| rest /servicesNS/-/-/properties/inputs/http/maxSockets `setup_all_servers_rest` 
    | rename value as maxSockets 
    | fields splunk_server maxSockets] 
| join splunk_server type=left [| rest /servicesNS/-/-/properties/inputs/http/maxThreads `setup_all_servers_rest` 
    | rename value as maxThreads 
    | fields splunk_server maxThreads] 
| join splunk_server type=left [| rest /servicesNS/-/-/properties/inputs/http/_rcvbuf `setup_all_servers_rest` 
    | rename value as rcvbuf 
    | fields splunk_server rcvbuf] 
| join splunk_server type=left [| rest /servicesNS/-/-/properties/inputs/http/useDeploymentServer `setup_all_servers_rest` 
    | rename value as useDeploymentServer 
    | fields splunk_server useDeploymentServer] 
| eval Splunk_Instance = lower(splunk_server) 
| `get_cluster_label(Splunk_Instance)` | `get_custom_group(Splunk_Instance)` 
| eval cluster_label = if(isnull(cluster_label) OR cluster_label="", Custom_Groups, cluster_label) 
| eval cluster_label = if(isnull(cluster_label) OR cluster_label="", Splunk_Instance, cluster_label) 
| stats VALUES(Splunk_Instance) AS Splunk_Instance VALUES(Splunk_Roles) AS Splunk_Roles VALUES(token) AS token LAST(disabled) AS disabled LAST(index_name) AS index_name LAST(indexes) AS indexes LAST(source_name) AS source_name LAST(sourcetype_name) AS sourcetype_name LAST(useACK) AS useACK LAST(dedicatedIoThreads) AS dedicatedIoThreads LAST(enableSSL) AS enableSSL LAST(port) AS port LAST(maxSockets) AS maxSockets LAST(maxThreads) AS maxThreads LAST(rcvbuf) AS rcvbuf LAST(useDeploymentServer) AS useDeploymentServer BY cluster_label, app, title, token_name 
| eval _time = now() 
| foreach Splunk_Roles, Splunk_Instance, token 
    [ eval <<FIELD>> = mvjoin(mvsort(mvdedup('<<FIELD>>')), "|") ] 
| table _time,cluster_label,Splunk_Roles,Splunk_Instance,app,title,token_name,token,disabled,index_name,indexes,source_name,sourcetype_name,useACK,dedicatedIoThreads,enableSSL,port,maxSockets,maxThreads rcvbuf useDeploymentServer 
| search NOT [ search `setup_summary_index` source=splunk_rest_data_inputs_http_sh_summary_data earliest=-8h latest=now | fields _time, cluster_label, app, title, token_name ] 
| collect `setup_summary_index` source=splunk_rest_data_inputs_http_sh_summary_data testmode=false | stats count
}
