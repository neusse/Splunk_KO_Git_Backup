{
	"allow_skew": "0",
	"author": "nobody",
	"cron_schedule": "25 3 * * *",
	"defer_scheduled_searchable_idxc": "0",
	"description": "Data Inputs Summary Index Gen Job From REST - [Daily - 03:25]",
	"disabled": "0",
	"dispatch.allow_partial_results": "1",
	"dispatch.auto_cancel": "0",
	"dispatch.auto_pause": "0",
	"dispatch.buckets": "0",
	"dispatch.earliest_time": "-1s",
	"dispatch.index_earliest": "",
	"dispatch.index_latest": "",
	"dispatch.indexedRealtime": "",
	"dispatch.indexedRealtimeMinSpan": "",
	"dispatch.indexedRealtimeOffset": "",
	"dispatch.latest_time": "now",
	"dispatch.lookups": "1",
	"dispatch.max_count": "500000",
	"dispatch.max_time": "0",
	"dispatch.rate_limit_retry": "0",
	"dispatch.reduce_freq": "10",
	"dispatch.rt_backfill": "0",
	"dispatch.rt_maximum_span": "",
	"dispatch.sample_ratio": "1",
	"dispatch.spawn_process": "1",
	"dispatch.time_format": "%FT%T.%Q%:z",
	"dispatch.ttl": "600",
	"dispatchAs": "owner",
	"eai:acl.app": "insights_app_splunk",
	"eai:acl.can_change_perms": "1",
	"eai:acl.can_list": "1",
	"eai:acl.can_share_app": "1",
	"eai:acl.can_share_global": "1",
	"eai:acl.can_share_user": "0",
	"eai:acl.can_write": "1",
	"eai:acl.modifiable": "1",
	"eai:acl.owner": "nobody",
	"eai:acl.perms.read": "*",
	"eai:acl.perms.write": "['admin', 'power', 'sc_admin']",
	"eai:acl.removable": "0",
	"eai:acl.sharing": "app",
	"embed.enabled": "0",
	"is_scheduled": "0",
	"is_visible": "1",
	"max_concurrent": "1",
	"precalculate_required_fields_for_alerts": "1",
	"published": "",
	"realtime_schedule": "1",
	"request.ui_dispatch_app": "",
	"request.ui_dispatch_view": "",
	"restart_on_searchpeer_add": "1",
	"run_n_times": "0",
	"run_on_startup": "0",
	"schedule_as": "auto",
	"schedule_priority": "default",
	"schedule_window": "auto",
	"skip_scheduled_realtime_idxc": "0",
	"splunk_server": "TheNeusse",
	"target": "saved/searches",
	"title": "splunk_rest_data_inputs_all_summary_data_genr",
	"updated": "1969-12-31T16:00:00-08:00",
	"vsid": "",
	"workload_pool": "",
	"search": 
| rest /servicesNS/-/-/data/inputs/all `setup_all_servers_rest` 
| rename eai:acl.* AS * 
| rename eai:* AS * 
| rename index AS index_name , sourcetype AS sourcetype_name , source AS source_name , removable AS acl_removable 
| where type!="ssl" 
| eval Splunk_Instance = lower(splunk_server) 
| `get_cluster_label(Splunk_Instance)` 
| `get_custom_group(Splunk_Instance)` 
| eval cluster_label = if(isnull(cluster_label) OR cluster_label="", Custom_Groups, cluster_label) 
| eval cluster_label = if(isnull(cluster_label) OR cluster_label="", Splunk_Instance, cluster_label) 
| `strptime_format(updated)` 
| eval author = if(author="nobody", "system", author), index = if(index="default", "main", index) 
| stats VALUES(Splunk_Instance) AS Splunk_Instance , VALUES(Splunk_Roles) AS Splunk_Roles, LAST(disabled) AS disabled , LAST(sharing) AS sharing , LAST(author) AS author , LAST(type) AS type , LAST(description) AS description , LAST(source_name) AS source_name , LAST(sourcetype_name) AS sourcetype_name , LAST(index_name) AS index_name , LAST(location) AS location , LAST(acceleration) AS acceleration , LAST(whitelist) AS whitelist , LAST(blacklist) AS blacklist , LAST(crcSalt) AS crcSalt , LAST(interval) AS interval , LAST(updated) AS updated , LAST(acl_removable) AS acl_removable , LAST(connection_host) AS connection_host , LAST(duration) AS duration , LAST(endtime) AS endtime , LAST(exclude) AS exclude , LAST(group) AS group , LAST(host_resolved) AS host_resolved , LAST(id_field) AS id_field , LAST(host) AS host , LAST(path) AS path , LAST(port) AS port , LAST(queue) AS queue , LAST(table) AS table BY cluster_label, app, title 
| eval _time = now() 
| foreach Splunk_Roles, Splunk_Instance [ eval <<FIELD>> = mvjoin(mvsort(mvdedup('<<FIELD>>')), "|") ] 
| table, _time, cluster_label, Splunk_Roles, Splunk_Instance, app, title, disabled, sharing, author, type, description, source_name, sourcetype_name, index_name, location, acceleration, whitelist, blacklist, crcSalt, interval, updated, acl_removable, connection_host, duration, endtime, exclude, group, host_resolved, id_field, host, path, port, queue, table 
| search NOT [ search `setup_summary_index` source=splunk_rest_data_inputs_all_summary_data earliest=-8h latest=now | fields _time, cluster_label, app, title ] 
| collect `setup_summary_index` source=splunk_rest_data_inputs_all_summary_data testmode=false 
| stats count
}
