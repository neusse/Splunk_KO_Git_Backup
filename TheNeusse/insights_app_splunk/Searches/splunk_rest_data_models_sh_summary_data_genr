{
	"allow_skew": "0",
	"author": "nobody",
	"cron_schedule": "15 5 * * *",
	"defer_scheduled_searchable_idxc": "0",
	"description": "Data Models Summary Index Gen Job From REST - [Daily - 05:15]",
	"disabled": "0",
	"dispatch.allow_partial_results": "1",
	"dispatch.auto_cancel": "0",
	"dispatch.auto_pause": "0",
	"dispatch.buckets": "0",
	"dispatch.earliest_time": "-1s",
	"dispatch.index_earliest": "",
	"dispatch.index_latest": "",
	"dispatch.indexedRealtime": "",
	"dispatch.indexedRealtimeMinSpan": "",
	"dispatch.indexedRealtimeOffset": "",
	"dispatch.latest_time": "now",
	"dispatch.lookups": "1",
	"dispatch.max_count": "500000",
	"dispatch.max_time": "0",
	"dispatch.rate_limit_retry": "0",
	"dispatch.reduce_freq": "10",
	"dispatch.rt_backfill": "0",
	"dispatch.rt_maximum_span": "",
	"dispatch.sample_ratio": "1",
	"dispatch.spawn_process": "1",
	"dispatch.time_format": "%FT%T.%Q%:z",
	"dispatch.ttl": "600",
	"dispatchAs": "owner",
	"eai:acl.app": "insights_app_splunk",
	"eai:acl.can_change_perms": "1",
	"eai:acl.can_list": "1",
	"eai:acl.can_share_app": "1",
	"eai:acl.can_share_global": "1",
	"eai:acl.can_share_user": "0",
	"eai:acl.can_write": "1",
	"eai:acl.modifiable": "1",
	"eai:acl.owner": "nobody",
	"eai:acl.perms.read": "*",
	"eai:acl.perms.write": "['admin', 'power', 'sc_admin']",
	"eai:acl.removable": "0",
	"eai:acl.sharing": "app",
	"embed.enabled": "0",
	"is_scheduled": "0",
	"is_visible": "1",
	"max_concurrent": "1",
	"precalculate_required_fields_for_alerts": "1",
	"published": "",
	"realtime_schedule": "1",
	"request.ui_dispatch_app": "",
	"request.ui_dispatch_view": "",
	"restart_on_searchpeer_add": "1",
	"run_n_times": "0",
	"run_on_startup": "0",
	"schedule_as": "auto",
	"schedule_priority": "default",
	"schedule_window": "auto",
	"skip_scheduled_realtime_idxc": "0",
	"splunk_server": "TheNeusse",
	"target": "saved/searches",
	"title": "splunk_rest_data_models_sh_summary_data_genr",
	"updated": "1969-12-31T16:00:00-08:00",
	"vsid": "",
	"workload_pool": "",
	"search": 
| rest /servicesNS/-/-/data/models `setup_search_head_rest` 
| rename eai:acl.* AS * 
| rename field.* AS * 
| join title type=left 
    [| rest /servicesNS/-/-/datamodel/model `setup_search_head_rest` 
    | rex field=description "\"description\":\"(?<description>.*?)\"" 
    | table title description] 
| rename acceleration.* AS * , perms.read AS acl_perms_read , perms.write AS acl_perms_write , removable AS acl_removable 
| eval author = if(author="nobody", "system", author), acl_perms_read = if(match(acl_perms_read, "\*"), "Everyone", acl_perms_read), acl_perms_write = if(match(acl_perms_write, "\*"), "Everyone", acl_perms_write), Splunk_Instance = lower(splunk_server) 
| `strptime_format(updated)` 
| `update_value(manual_rebuilds,"1","true")` 
| `update_value(manual_rebuilds,"0","false")` 
| `get_shcluster_label(Splunk_Instance)` 
| stats VALUES(Splunk_Instance) AS Splunk_Instance VALUES(Splunk_Roles) AS Splunk_Roles VALUES(acl_perms_read) AS acl_perms_read VALUES(acl_perms_write) AS acl_perms_write LAST(acl_removable) AS acl_removable LAST(disabled) AS disabled LAST(sharing) AS sharing LAST(author) AS author LAST(acceleration) AS acceleration LAST(allow_old_summaries) AS allow_old_summaries LAST(allow_skew) AS allow_skew LAST(cron_schedule) AS cron_schedule LAST(earliest_time) AS earliest_time LAST(manual_rebuilds) AS manual_rebuilds LAST(max_concurrent) AS max_concurrent LAST(max_time) AS max_time LAST(poll_buckets_until_maxtime) AS poll_buckets_until_maxtime LAST(updated) AS updated LAST(description) AS description LAST(workload_pool) AS workload_pool BY shcluster_label, app, title 
| eval _time = now() 
| foreach Splunk_Roles, Splunk_Instance, acl_perms_* [ eval <<FIELD>> = mvjoin(mvsort(mvdedup('<<FIELD>>')), "|") ] 
| table _time, shcluster_label, Splunk_Roles, Splunk_Instance, disabled, title, app, sharing, author, acceleration, allow_old_summaries, allow_skew, cron_schedule, earliest_time, manual_rebuilds, max_concurrent, max_time, poll_buckets_until_maxtime, updated, acl_perms_read, acl_perms_write, description, acl_removable, workload_pool 
| where shcluster_label!="No-shcluster_label" 
| search NOT [ search `setup_summary_index` source=splunk_rest_data_models_sh_summary_data earliest=-8h latest=now |  fields _time, shcluster_label, app, title ] 
| collect `setup_summary_index` source=splunk_rest_data_models_sh_summary_data testmode=false | stats count
}
