{
	"allow_skew": "0",
	"author": "nobody",
	"cron_schedule": "50 1 * * *",
	"defer_scheduled_searchable_idxc": "0",
	"description": "Configuration Files Summary Index Gen Job From REST - [Daily - 01:50]",
	"disabled": "0",
	"dispatch.allow_partial_results": "1",
	"dispatch.auto_cancel": "0",
	"dispatch.auto_pause": "0",
	"dispatch.buckets": "0",
	"dispatch.earliest_time": "-1s",
	"dispatch.index_earliest": "",
	"dispatch.index_latest": "",
	"dispatch.indexedRealtime": "",
	"dispatch.indexedRealtimeMinSpan": "",
	"dispatch.indexedRealtimeOffset": "",
	"dispatch.latest_time": "now",
	"dispatch.lookups": "1",
	"dispatch.max_count": "500000",
	"dispatch.max_time": "0",
	"dispatch.rate_limit_retry": "0",
	"dispatch.reduce_freq": "10",
	"dispatch.rt_backfill": "0",
	"dispatch.rt_maximum_span": "",
	"dispatch.sample_ratio": "1",
	"dispatch.spawn_process": "1",
	"dispatch.time_format": "%FT%T.%Q%:z",
	"dispatch.ttl": "600",
	"dispatchAs": "owner",
	"eai:acl.app": "insights_app_splunk",
	"eai:acl.can_change_perms": "1",
	"eai:acl.can_list": "1",
	"eai:acl.can_share_app": "1",
	"eai:acl.can_share_global": "1",
	"eai:acl.can_share_user": "0",
	"eai:acl.can_write": "1",
	"eai:acl.modifiable": "1",
	"eai:acl.owner": "nobody",
	"eai:acl.perms.read": "*",
	"eai:acl.perms.write": "['admin', 'power', 'sc_admin']",
	"eai:acl.removable": "0",
	"eai:acl.sharing": "app",
	"embed.enabled": "0",
	"is_scheduled": "0",
	"is_visible": "1",
	"max_concurrent": "1",
	"precalculate_required_fields_for_alerts": "1",
	"published": "",
	"realtime_schedule": "1",
	"request.ui_dispatch_app": "",
	"request.ui_dispatch_view": "",
	"restart_on_searchpeer_add": "1",
	"run_n_times": "0",
	"run_on_startup": "0",
	"schedule_as": "auto",
	"schedule_priority": "default",
	"schedule_window": "auto",
	"skip_scheduled_realtime_idxc": "0",
	"splunk_server": "TheNeusse",
	"target": "saved/searches",
	"title": "splunk_rest_configs_conf_files_summary_data_geno",
	"updated": "1969-12-31T16:00:00-08:00",
	"vsid": "",
	"workload_pool": "",
	"search": 
| rest /servicesNS/-/-/configs/conf-limits `setup_all_servers_rest` 
| rename eai:acl.app AS app 
| rename eai:acl.sharing AS sharing 
| fields - published id eai* null* 
| eval stanza = title 
| fields title author splunk_server app sharing stanza ** 
| eval author = if(author="nobody", "system", author) , title="[".title."]" 
| foreach * 
    [ eval title = if("<<FIELD>>"="author" OR "<<FIELD>>"="splunk_server" OR "<<FIELD>>"="app" OR "<<FIELD>>"="sharing" OR "<<FIELD>>"="title" OR "<<FIELD>>"="stanza" OR '<<FIELD>>'="", title, mvappend (title, "<<FIELD>>"." = ".'<<FIELD>>'." ")) ] 
| eval Splunk_Instance = lower(splunk_server), title = mvjoin(title, "###") , config_file="limits.conf" 
| fields Splunk_Instance config_file app sharing author stanza title updated 
| append 
    [| rest /servicesNS/-/-/configs/conf-server `setup_all_servers_rest` 
    | rename eai:acl.app AS app 
    | rename eai:acl.sharing AS sharing 
    | fields - published id eai* null* 
    | eval stanza = title 
    | fields title author splunk_server app sharing stanza ** 
    | eval author = if(author="nobody", "system", author) , title="[".title."]" 
    | foreach * 
        [ eval title = if("<<FIELD>>"="author" OR "<<FIELD>>"="splunk_server" OR "<<FIELD>>"="app" OR "<<FIELD>>"="sharing" OR "<<FIELD>>"="title" OR "<<FIELD>>"="stanza" OR '<<FIELD>>'="", title, mvappend (title, "<<FIELD>>"." = ".'<<FIELD>>'." "))] 
    | eval Splunk_Instance = lower(splunk_server), title = mvjoin(title, "###") , config_file="server.conf" 
    | fields Splunk_Instance config_file app sharing author stanza title updated ] 
| append 
    [| rest /servicesNS/-/-/configs/conf-distsearch `setup_all_servers_rest` 
    | rename eai:acl.app AS app 
    | rename eai:acl.sharing AS sharing 
    | fields - published id eai* null* 
    | eval stanza = title 
    | fields title author splunk_server app sharing stanza ** 
    | eval author = if(author="nobody", "system", author) , title="[".title."]" 
    | foreach * 
        [ eval title = if("<<FIELD>>"="author" OR "<<FIELD>>"="splunk_server" OR "<<FIELD>>"="app" OR "<<FIELD>>"="sharing" OR "<<FIELD>>"="title" OR "<<FIELD>>"="stanza" OR '<<FIELD>>'="", title, mvappend (title, "<<FIELD>>"." = ".'<<FIELD>>'." ")) ] 
    | eval Splunk_Instance = lower(splunk_server), title = mvjoin(title, "###") , config_file="distsearch.conf" 
    | fields Splunk_Instance config_file app sharing author stanza title updated ] 
| append 
    [| rest /servicesNS/-/-/configs/conf-outputs `setup_all_servers_rest` 
    | rename eai:acl.app AS app 
    | rename eai:acl.sharing AS sharing 
    | fields - published id eai* null* 
    | eval stanza = title 
    | fields title author splunk_server app sharing stanza ** 
    | eval author = if(author="nobody", "system", author) , title="[".title."]" 
    | foreach * 
        [ eval title = if("<<FIELD>>"="author" OR "<<FIELD>>"="splunk_server" OR "<<FIELD>>"="app" OR "<<FIELD>>"="sharing" OR "<<FIELD>>"="title" OR "<<FIELD>>"="stanza" OR '<<FIELD>>'="", title, mvappend (title, "<<FIELD>>"." = ".'<<FIELD>>'." ")) ] 
    | eval Splunk_Instance = lower(splunk_server), title = mvjoin(title, "###") , config_file="outputs.conf" 
    | fields Splunk_Instance config_file app sharing author stanza title updated ] 
| append 
    [| rest /servicesNS/-/-/configs/conf-web `setup_all_servers_rest` 
    | rename eai:acl.app AS app 
    | rename eai:acl.sharing AS sharing 
    | fields - published id eai* null* 
    | eval stanza = title 
    | fields title author splunk_server app sharing stanza ** 
    | eval author = if(author="nobody", "system", author) , title="[".title."]" 
    | foreach * 
        [ eval title = if("<<FIELD>>"="author" OR "<<FIELD>>"="splunk_server" OR "<<FIELD>>"="app" OR "<<FIELD>>"="sharing" OR "<<FIELD>>"="title" OR "<<FIELD>>"="stanza" OR '<<FIELD>>'="", title, mvappend (title, "<<FIELD>>"." = ".'<<FIELD>>'." ")) ] 
    | eval Splunk_Instance = lower(splunk_server), title = mvjoin(title, "###") , config_file="web.conf" 
    | fields Splunk_Instance config_file app sharing author stanza title updated ] 
| append 
    [| rest /servicesNS/-/-/configs/conf-ui-prefs `setup_all_servers_rest` 
    | rename eai:acl.app AS app 
    | rename eai:acl.sharing AS sharing 
    | fields - published id eai* null* 
    | eval stanza = title 
    | fields title author splunk_server app sharing stanza ** 
    | eval author = if(author="nobody", "system", author) , title="[".title."]" 
    | foreach * 
        [ eval title = if("<<FIELD>>"="author" OR "<<FIELD>>"="splunk_server" OR "<<FIELD>>"="app" OR "<<FIELD>>"="sharing" OR "<<FIELD>>"="title" OR "<<FIELD>>"="stanza" OR '<<FIELD>>'="", title, mvappend (title, "<<FIELD>>"." = ".'<<FIELD>>'." ")) ] 
    | eval Splunk_Instance = lower(splunk_server), title = mvjoin(title, "###") , config_file="ui-prefs.conf" 
    | fields Splunk_Instance config_file app sharing author stanza title updated ] 
| append 
    [| rest /servicesNS/-/-/workloads/rules `setup_all_servers_rest` 
    | rename eai:acl.app AS app 
    | rename eai:acl.sharing AS sharing 
    | fields - published id eai* null* 
    | `strptime_format(updated)` 
    | eval stanza = title 
    | fields title author splunk_server app sharing stanza ** 
    | eval author = if(author="nobody", "system", author) , title="[".title."]" 
    | foreach * 
        [ eval title = if("<<FIELD>>"="author" OR "<<FIELD>>"="splunk_server" OR "<<FIELD>>"="app" OR "<<FIELD>>"="sharing" OR "<<FIELD>>"="title" OR "<<FIELD>>"="stanza" OR '<<FIELD>>'="", title, mvappend (title, "<<FIELD>>"." = ".'<<FIELD>>'." ")) ] 
    | eval Splunk_Instance = lower(splunk_server), title = mvjoin(title, "###") , config_file="workloads_rules.conf" 
    | fields Splunk_Instance config_file app sharing author stanza title updated ] 
| append 
    [| rest /servicesNS/-/-/workloads/categories `setup_all_servers_rest` 
    | rename eai:acl.app AS app 
    | rename eai:acl.sharing AS sharing 
    | fields - published id eai* null* 
    | `strptime_format(updated)` 
    | eval stanza = title 
    | fields title author splunk_server app sharing stanza ** 
    | eval author = if(author="nobody", "system", author) , title="[".title."]" 
    | foreach * 
        [ eval title = if("<<FIELD>>"="author" OR "<<FIELD>>"="splunk_server" OR "<<FIELD>>"="app" OR "<<FIELD>>"="sharing" OR "<<FIELD>>"="title" OR "<<FIELD>>"="stanza" OR '<<FIELD>>'="", title, mvappend (title, "<<FIELD>>"." = ".'<<FIELD>>'." ")) ] 
    | eval Splunk_Instance = lower(splunk_server), title = mvjoin(title, "###") , config_file="workloads_categories.conf" 
    | fields Splunk_Instance config_file app sharing author stanza title updated ] 
| append 
    [| rest /servicesNS/-/-/workloads/pools `setup_all_servers_rest` 
    | rename eai:acl.app AS app 
    | rename eai:acl.sharing AS sharing 
    | fields - published id eai* null* 
    | `strptime_format(updated)` 
    | eval stanza = title 
    | fields title author splunk_server app sharing stanza ** 
    | eval author = if(author="nobody", "system", author) , title="[".title."]" 
    | foreach * 
        [ eval title = if("<<FIELD>>"="author" OR "<<FIELD>>"="splunk_server" OR "<<FIELD>>"="app" OR "<<FIELD>>"="sharing" OR "<<FIELD>>"="title" OR "<<FIELD>>"="stanza" OR '<<FIELD>>'="", title, mvappend (title, "<<FIELD>>"." = ".'<<FIELD>>'." ")) ] 
    | eval Splunk_Instance = lower(splunk_server), title = mvjoin(title, "###") , config_file="workloads_pools.conf" 
    | fields Splunk_Instance config_file app sharing author stanza title updated ] 
| `strptime_format(updated)` 
| `get_cluster_label(Splunk_Instance)` 
| `get_custom_group(Splunk_Instance)` 
| eval cluster_label = if(isnull(cluster_label) OR cluster_label="", Custom_Groups, cluster_label) 
| eval cluster_label = if(isnull(cluster_label) OR cluster_label="", Splunk_Instance, cluster_label) 
| fields cluster_label Splunk_Roles Splunk_Instance config_file app sharing author stanza title updated 
| makemv delim="###" title 
| mvexpand title 
| search title!="[*" 
| stats LAST(updated) AS updated, VALUES(Splunk_Instance) AS Splunk_Instance, VALUES(Splunk_Roles) AS Splunk_Roles 
    By cluster_label, app, sharing, author, config_file, stanza, title 
| eval _time = now() 
| foreach Splunk_Roles, Splunk_Instance [ eval <<FIELD>> = mvjoin(mvsort(mvdedup('<<FIELD>>')), "|") ] 
| table _time, cluster_label, Splunk_Roles, Splunk_Instance, config_file, app, sharing, author, stanza, title, updated 
| search NOT [ search `setup_summary_index` source=splunk_rest_configs_conf_files_summary_data earliest=-8h latest=now | fields _time, cluster_label ] 
| collect `setup_summary_index` source=splunk_rest_configs_conf_files_summary_data testmode=false 
| stats count
}
