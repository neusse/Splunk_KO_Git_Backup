{
	"allow_skew": "15%",
	"author": "nobody",
	"cron_schedule": "*/30 * * * *",
	"defer_scheduled_searchable_idxc": "0",
	"description": "",
	"disabled": "0",
	"dispatch.allow_partial_results": "1",
	"dispatch.auto_cancel": "0",
	"dispatch.auto_pause": "0",
	"dispatch.buckets": "0",
	"dispatch.earliest_time": "-31m@m",
	"dispatch.index_earliest": "",
	"dispatch.index_latest": "",
	"dispatch.indexedRealtime": "",
	"dispatch.indexedRealtimeMinSpan": "",
	"dispatch.indexedRealtimeOffset": "",
	"dispatch.latest_time": "-1m@m",
	"dispatch.lookups": "1",
	"dispatch.max_count": "500000",
	"dispatch.max_time": "0",
	"dispatch.rate_limit_retry": "0",
	"dispatch.reduce_freq": "10",
	"dispatch.rt_backfill": "0",
	"dispatch.rt_maximum_span": "",
	"dispatch.sample_ratio": "1",
	"dispatch.spawn_process": "1",
	"dispatch.time_format": "%FT%T.%Q%:z",
	"dispatch.ttl": "2p",
	"dispatchAs": "owner",
	"eai:acl.app": "splunk_kom",
	"eai:acl.can_change_perms": "1",
	"eai:acl.can_list": "1",
	"eai:acl.can_share_app": "1",
	"eai:acl.can_share_global": "1",
	"eai:acl.can_share_user": "0",
	"eai:acl.can_write": "1",
	"eai:acl.modifiable": "1",
	"eai:acl.owner": "nobody",
	"eai:acl.perms.read": "admin",
	"eai:acl.perms.write": "admin",
	"eai:acl.removable": "0",
	"eai:acl.sharing": "app",
	"embed.enabled": "0",
	"is_scheduled": "1",
	"is_visible": "1",
	"max_concurrent": "1",
	"precalculate_required_fields_for_alerts": "1",
	"published": "",
	"realtime_schedule": "1",
	"request.ui_dispatch_app": "splunk_kom",
	"request.ui_dispatch_view": "search",
	"restart_on_searchpeer_add": "1",
	"run_n_times": "0",
	"run_on_startup": "0",
	"schedule_as": "auto",
	"schedule_priority": "default",
	"schedule_window": "auto",
	"skip_scheduled_realtime_idxc": "0",
	"splunk_server": "TheNeusse",
	"target": "saved/searches",
	"title": "KOM_Reports_Searches_Resource_Utilisation_Summary",
	"updated": "1969-12-31T16:00:00-08:00",
	"vsid": "",
	"workload_pool": "",
	"search": 
index=_introspection  source="*resource_usage.log*" component::PerProcess data.process_type::search data.search_props.provenance=UI:Report
| eval search_id=replace('data.search_props.sid', "^remote_[^_]+_(.*)$", "\1") 
| stats earliest(data.search_props.provenance) AS provenance, 
    earliest(data.search_props.label) AS savedsearch_name, 
    earliest(host) AS orig_splunk_server    
    avg(eval(if('data.search_props.role' == "peer", 'data.pct_cpu', null()))) AS avg_idx_cpu, 
    avg(eval(if('data.search_props.role' == "peer", 'data.read_mb', null()))) AS avg_idx_read_mb, 
    avg(eval(if('data.search_props.role' == "peer", 'data.written_mb', null()))) AS avg_idx_written_mb, 
    avg(eval(if('data.search_props.role' == "peer", 'data.pct_memory', null()))) AS avg_idx_pct_mem, 
    avg(eval(if('data.search_props.role' == "head", 'data.pct_cpu', null()))) AS avg_sh_cpu, 
    avg(eval(if('data.search_props.role' == "head", 'data.read_mb', null()))) AS avg_sh_read_mb, 
    avg(eval(if('data.search_props.role' == "head", 'data.written_mb', null()))) AS avg_sh_written_mb, 
    avg(eval(if('data.search_props.role' == "head", 'data.pct_memory', null()))) AS avg_sh_pct_mem, 
    max(eval(if('data.search_props.role' == "peer", 'data.pct_cpu', null()))) AS max_idx_cpu, 
    max(eval(if('data.search_props.role' == "peer", 'data.read_mb', null()))) AS max_idx_read_mb, 
    max(eval(if('data.search_props.role' == "peer", 'data.written_mb', null()))) AS max_idx_written_mb, 
    max(eval(if('data.search_props.role' == "peer", 'data.pct_memory', null()))) AS max_idx_pct_mem, 
    max(eval(if('data.search_props.role' == "head", 'data.pct_cpu', null()))) AS max_sh_cpu, 
    max(eval(if('data.search_props.role' == "head", 'data.read_mb', null()))) AS max_sh_read_mb, 
    max(eval(if('data.search_props.role' == "head", 'data.written_mb', null()))) AS max_sh_written_mb, 
    max(eval(if('data.search_props.role' == "head", 'data.pct_memory', null()))) AS max_sh_pct_mem, 
    BY _time data.search_props.app data.search_props.type, data.search_props.mode, search_id data.search_props.role
| rex field=search_id "^(?<sid_caller>\w+)((_|__)(?<sid_owner>\w+)(_|__)(?<sid_app>\w+)__(?<sid_search_name>\w+))_at"
| eval sid_caller = rtrim(sid_caller,"_")
| eval sid_owner = rtrim(sid_owner,"_")
| eval search_type=case(match(sid_caller,"^(SummaryDirector_|summarize_)"),"summarization",match(sid_caller,"^((rsa_|rt_|summarize_)?scheduler|alertsmanager)"),"scheduled", match(search_id,"^_[a-zA-Z0-9]+__"),"scheduled", match(sid_caller,"^subsearch_"),"subsearch", (isnotnull(sid_caller) AND isnotnull(sid_owner) AND isnotnull(sid_search_name)),"report", true(),"other")
| fillnull value=0 avg_idx_cpu avg_sh_cpu avg_idx_pct_mem avg_sh_pct_mem avg_idx_read_mb avg_sh_read_mb avg_idx_written_mb avg_sh_written_mb max_sh_read_mb max_idx_read_mb max_sh_written_mb max_idx_written_mb max_idx_cpu max_idx_pct_mem max_sh_cpu max_sh_pct_mem
| rename data.search_props.type AS search_props_type, 
    data.search_props.mode AS search_props_mode, 
    data.search_props.app AS app_name
    data.search_props.role AS splunk_search_role
    sid_caller AS sid_user
| eval introspection_time = _time 
| fields introspection_time app_name sid_user sid_search_name sid_app search_type *
}
