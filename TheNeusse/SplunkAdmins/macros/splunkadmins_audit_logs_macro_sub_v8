{
	"author": "nobody",
	"disabled": "0",
	"eai:acl.app": "SplunkAdmins",
	"eai:acl.can_change_perms": "1",
	"eai:acl.can_list": "1",
	"eai:acl.can_share_app": "1",
	"eai:acl.can_share_global": "1",
	"eai:acl.can_share_user": "0",
	"eai:acl.can_write": "1",
	"eai:acl.modifiable": "1",
	"eai:acl.owner": "nobody",
	"eai:acl.perms.read": "['admin', 'sc_admin']",
	"eai:acl.perms.write": "['admin', 'sc_admin']",
	"eai:acl.removable": "0",
	"eai:acl.sharing": "app",
	"eai:appName": "SplunkAdmins",
	"eai:userName": "nobody",
	"iseval": "0",
	"published": "",
	"splunk_server": "TheNeusse",
	"target": "admin/macros",
	"title": "splunkadmins_audit_logs_macro_sub_v8",
	"updated": "1969-12-31T16:00:00-08:00",
	"definition": 
search `comment("Set all values to null() in case this macro is called again within the same search. Subsitute a macro used inside a search with the definition found in the lookup file")` 
| eval definition=null(), definition2=null(), definition3=null(), commas=null(), commas2=null(), argCount2=null(), argCount=null(), match=null() 
| rex field=search "\\`(?!\")(?!')(?P<macro>[^\\`]+)\\`" max_match=20 
| search `comment("remove any commas inside double quotes or single quotes inside a macro, they are probably not arguments to the macro itself")` 
| eval remove_commas_inside_macros=mvmap(macro,replace(macro,"(\"[^\"]+\"|'[^']+')","")) 
| search `comment("Originally a regex, the replace+len works in mvmap and determines number of commas so we can find a macro name")` 
| eval commas2=mvmap(remove_commas_inside_macros,if(match(remove_commas_inside_macros,"^[^\(]+$"),"-1",len(replace(remove_commas_inside_macros,"[^,]+",""))+1)) 
| rex field=macro "(?P<macro_name>^[^\( ]+)" max_match=20 
| eval macro_commas=mvzip(macro_name,commas2,"!!!!!!!") 
| search `comment("A macro with zero arguments is -1 from the previous mvmap, if it has non-zero arguments the definition changes to macro(number)...")` 
| eval macroName=mvmap(macro_commas,if(mvindex(split(macro_commas,"!!!!!!!"),1)=="-1",mvindex(split(macro_commas,"!!!!!!!"),0),mvindex(split(macro_commas,"!!!!!!!"),0) . "(" . mvindex(split(macro_commas,"!!!!!!!"),1) . ")")) 
| lookup splunkadmins_macros title AS macroName, app AS app_name, splunk_server 
| eval app_name2="global" 
| search `comment("The original version just did an OUTPUTNEW definition, however this has the limitation that if 1 of the 5 macros found resolves, output stops. And this can result in missing macros. So this version over-matches but that appears to be the tradeoff...without making this even more complicated")` 
| lookup splunkadmins_macros title AS macroName, app AS app_name2, splunk_server OUTPUT definition AS definition2 
| lookup splunkadmins_macros title AS macroName, splunk_server OUTPUT definition AS definition3 
| eval definition=mvdedup(mvappend(definition,definition2,definition3)) 
| fillnull definition value="macronotfound" 
| nomv definition 
| eval definition=" " . definition . " " 
| search `comment("While an mvmap could replace per-macro that results in a multivalue output. Also replace doesn't handle a multivalued replacement argument so just replace the first macro if it exists with the definitions of all the macros, close enough for what we want")` 
| eval search=if(isnotnull(macro_name),replace(search,mvindex(macro_name,0),definition),search)
}
