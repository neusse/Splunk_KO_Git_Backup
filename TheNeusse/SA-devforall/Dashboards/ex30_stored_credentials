{
	"author": "nobody",
	"description": "Do you need to store a username and password, but don't want to hardcode it unencrypted on the local file system? Stored credentials are here to solve that problem for you!",
	"disabled": "0",
	"eai:acl.app": "SA-devforall",
	"eai:acl.can_change_perms": "1",
	"eai:acl.can_list": "1",
	"eai:acl.can_share_app": "1",
	"eai:acl.can_share_global": "1",
	"eai:acl.can_share_user": "0",
	"eai:acl.can_write": "1",
	"eai:acl.modifiable": "1",
	"eai:acl.owner": "nobody",
	"eai:acl.perms.read": "*",
	"eai:acl.perms.write": "['admin', 'power']",
	"eai:acl.removable": "0",
	"eai:acl.sharing": "app",
	"eai:appName": "SA-devforall",
	"eai:digest": "5131e9523aa573302e71be13f69a0544",
	"eai:type": "views",
	"eai:userName": "nobody",
	"isDashboard": "1",
	"isVisible": "1",
	"label": "Stored Credentials",
	"published": "",
	"rootNode": "dashboard",
	"splunk_server": "TheNeusse",
	"target": "data/ui/views",
	"title": "ex30-stored-credentials",
	"updated": "1969-12-31T16:00:00-08:00",
	"version": "",
	"eai:data": 
<dashboard script="ex30-stored-credentials/ex30-stored-credentials.js">
    <label>Stored Credentials</label>
    <description>Do you need to store a username and password, but don't want to hardcode it unencrypted on the local file system? Stored credentials are here to solve that problem for you!</description>
    <row>
        <panel>
            <title>Description</title>
            <html>
                <div>

                    
                    <p>Dealing with sensitive credentials is always a tricky prospect. For years, the standard was to store them locally in plaintext on the filesystem and then use ACLs or similar security controls to restrict access. Fortunately, Splunk 6.3 added a more secure way of storing passwords, the passwords.conf file and storage/passwords rest endpoint. Splunk has, for years, had password encryption capabilities that we used for the local system logins -- this 6.3 feature extended those capabilities to app generated passwords. If you post a password to /services/storage/passwords, it will encrypt it and store that password.</p>
                    <p><b>Warning:</b> there are two inherent security problems here. The first is that both the encryption key and the encrypted password are stored on the same system.. so if you have access to the system you can still decrypt the password. The second is that, depending on how your environment is configured, using the secure password storage method could potentially expose the password to *more* people than storing it just on the filesystem, since it's now queryable via the | rest command for anyone who has administrative rights (or specifically the list_storage_passwords capability). Be strategic about how you handle these risks.</p>
                </div>
            </html>
        </panel>
        <panel>
            <title>Where We've Used This</title>
            <html>
                <div>
                    
                    <p>This is used in numerous apps, and has gotten extensive coverage. For more information, view Scott Haskell's app <a href="https://splunkbase.splunk.com/app/4013/"><i>REST storage/passwords Manager for Splunk</i></a>, <a href="http://www.georgestarcher.com/splunk-stored-encrypted-credentials/">George Starcher's great blog post</a> for those coding in Python, or of course the normal Splunk dev docs.</p>
                </div>
            </html>
        </panel>
        <panel>
            <title>Files Involved</title>
            <html>
                <div>
                    
                    <ul class="files">
                        <li>default/data/ui/views/ex30-stored-credentials.xml</li>
                        <li>appserver/static/ex30-stored-credentials/ex30-stored-credentials.js</li>
                    </ul>
                </div>
            </html>
        </panel>
    </row>
    <row>
        <panel>
            <title>Simple Example</title>
            <html>
                <h3>Input</h3>
                <p>In this simple example, we will provide a text input and a "Store" button. That will write the username and password to encrypted storage. Retrieve will retrieve it. If you don't have administrative rights, this won't work.</p>
                <div id="input_simple"></div>
                <div id="button_write_simple"></div>
                <div id="button_read_simple"></div>
                <br />
                <div id="results_simple"></div>
                </html>
        </panel>
    </row>
    <row>
        <panel>
            <title>Splunk Search Example</title>
            <table>
                <title>Refreshes every 10 seconds</title>
                <search id="restsearch">
                    <query>| rest splunk_server=local /services/storage/passwords  | table username *password* *.app author</query>
                    <refresh>10</refresh>
                </search>
            </table>
        </panel>
    </row>
</dashboard>
}
