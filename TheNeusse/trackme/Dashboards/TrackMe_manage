{
	"author": "admin",
	"disabled": "0",
	"eai:acl.app": "trackme",
	"eai:acl.can_change_perms": "1",
	"eai:acl.can_list": "1",
	"eai:acl.can_share_app": "1",
	"eai:acl.can_share_global": "1",
	"eai:acl.can_share_user": "0",
	"eai:acl.can_write": "1",
	"eai:acl.modifiable": "1",
	"eai:acl.owner": "admin",
	"eai:acl.perms.read": "*",
	"eai:acl.perms.write": "['admin', 'trackme_admin']",
	"eai:acl.removable": "0",
	"eai:acl.sharing": "app",
	"eai:appName": "trackme",
	"eai:digest": "51237197ba990f5a46d2e2a52116fed1",
	"eai:type": "html",
	"eai:userName": "nobody",
	"isDashboard": "1",
	"isVisible": "1",
	"label": "TrackMe_manage",
	"published": "",
	"splunk_server": "TheNeusse",
	"target": "data/ui/views",
	"title": "TrackMe_manage",
	"updated": "1969-12-31T16:00:00-08:00",
	"eai:data": 
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>TrackMe - Data tracking system</title>
    <link rel="shortcut icon" href="/en-US/static/@E0748683B67CEA4FEB581C608314742274902FE131518C73E0D443740659785A.7/img/favicon.ico" />
    <link rel="stylesheet" type="text/css" href="{{SPLUNKWEB_URL_PREFIX}}/static/build/css/bootstrap-enterprise.css" />
    <link rel="stylesheet" type="text/css" href="{{SPLUNKWEB_URL_PREFIX}}/static/css/build/pages/dashboard-simple-bootstrap.min.css" />
    <link rel="stylesheet" type="text/css" media="all" href="{{SPLUNKWEB_URL_PREFIX}}/static/app/trackme/table.css" />
    <link rel="stylesheet" type="text/css" media="all" href="{{SPLUNKWEB_URL_PREFIX}}/static/app/trackme/common.css" />
    <link rel="stylesheet" type="text/css" media="all" href="{{SPLUNKWEB_URL_PREFIX}}/static/app/trackme/notifybar/jquery.notifyBar.css" />

    <meta name="referrer" content="never" />
    <meta name="referrer" content="no-referrer" />

    <script>
        window._splunk_metrics_events = {
            push : function() {},
            active: false,
        }
    </script>
    <style>
        /* Bootstrap btns */
        .btn-primary {
        color: #fff;
        background-color: #007bff;
        border-color: #007bff;
        }

        .btn-primary:hover {
        color: #fff;
        background-color: #0069d9;
        border-color: #0062cc;
        }

        .btn-primary:focus, .btn-primary.focus {
        color: #fff;
        background-color: #0069d9;
        border-color: #0062cc;
        box-shadow: 0 0 0 0.2rem rgba(38, 143, 255, 0.5);
        }

        .btn-primary.disabled, .btn-primary:disabled {
        color: #fff;
        background-color: #007bff;
        border-color: #007bff;
        }

        .btn-primary:not(:disabled):not(.disabled):active, .btn-primary:not(:disabled):not(.disabled).active,
        .show > .btn-primary.dropdown-toggle {
        color: #fff;
        background-color: #0062cc;
        border-color: #005cbf;
        }

        .btn-primary:not(:disabled):not(.disabled):active:focus, .btn-primary:not(:disabled):not(.disabled).active:focus,
        .show > .btn-primary.dropdown-toggle:focus {
        box-shadow: 0 0 0 0.2rem rgba(38, 143, 255, 0.5);
        }

        .btn-danger {
        color: #fff;
        background-color: #dc3545;
        border-color: #dc3545;
        }

        .btn-danger:hover {
        color: #fff;
        background-color: #c82333;
        border-color: #bd2130;
        }

        .btn-danger:focus, .btn-danger.focus {
        color: #fff;
        background-color: #c82333;
        border-color: #bd2130;
        box-shadow: 0 0 0 0.2rem rgba(225, 83, 97, 0.5);
        }

        .btn-danger.disabled, .btn-danger:disabled {
        color: #fff;
        background-color: #dc3545;
        border-color: #dc3545;
        }

        .btn-danger:not(:disabled):not(.disabled):active, .btn-danger:not(:disabled):not(.disabled).active,
        .show > .btn-danger.dropdown-toggle {
        color: #fff;
        background-color: #bd2130;
        border-color: #b21f2d;
        }

        .btn-danger:not(:disabled):not(.disabled):active:focus, .btn-danger:not(:disabled):not(.disabled).active:focus,
        .show > .btn-danger.dropdown-toggle:focus {
        box-shadow: 0 0 0 0.2rem rgba(225, 83, 97, 0.5);
        }

        .btn-info {
        color: #fff;
        background-color: #17a2b8;
        border-color: #17a2b8;
        }

        .btn-info:hover {
        color: #fff;
        background-color: #138496;
        border-color: #117a8b;
        }

        .btn-info:focus, .btn-info.focus {
        color: #fff;
        background-color: #138496;
        border-color: #117a8b;
        box-shadow: 0 0 0 0.2rem rgba(58, 176, 195, 0.5);
        }

        .btn-info.disabled, .btn-info:disabled {
        color: #fff;
        background-color: #17a2b8;
        border-color: #17a2b8;
        }

        .btn-info:not(:disabled):not(.disabled):active, .btn-info:not(:disabled):not(.disabled).active,
        .show > .btn-info.dropdown-toggle {
        color: #fff;
        background-color: #117a8b;
        border-color: #10707f;
        }

        .btn-info:not(:disabled):not(.disabled):active:focus, .btn-info:not(:disabled):not(.disabled).active:focus,
        .show > .btn-info.dropdown-toggle:focus {
        box-shadow: 0 0 0 0.2rem rgba(58, 176, 195, 0.5);
        }

        .btn-warning {
        color: #212529;
        background-color: #ffc107;
        border-color: #ffc107;
        }

        .btn-warning:hover {
        color: #212529;
        background-color: #e0a800;
        border-color: #d39e00;
        }

        .btn-warning:focus, .btn-warning.focus {
        color: #212529;
        background-color: #e0a800;
        border-color: #d39e00;
        box-shadow: 0 0 0 0.2rem rgba(222, 170, 12, 0.5);
        }

        .btn-warning.disabled, .btn-warning:disabled {
        color: #212529;
        background-color: #ffc107;
        border-color: #ffc107;
        }

        .btn-warning:not(:disabled):not(.disabled):active, .btn-warning:not(:disabled):not(.disabled).active,
        .show > .btn-warning.dropdown-toggle {
        color: #212529;
        background-color: #d39e00;
        border-color: #c69500;
        }

        .btn-warning:not(:disabled):not(.disabled):active:focus, .btn-warning:not(:disabled):not(.disabled).active:focus,
        .show > .btn-warning.dropdown-toggle:focus {
        box-shadow: 0 0 0 0.2rem rgba(222, 170, 12, 0.5);
        }

        .btn-success {
        color: #fff;
        background-color: #28a745;
        border-color: #28a745;
        }

        .btn-success:hover {
        color: #fff;
        background-color: #218838;
        border-color: #1e7e34;
        }

        .btn-success:focus, .btn-success.focus {
        color: #fff;
        background-color: #218838;
        border-color: #1e7e34;
        box-shadow: 0 0 0 0.2rem rgba(72, 180, 97, 0.5);
        }

        .btn-success.disabled, .btn-success:disabled {
        color: #fff;
        background-color: #28a745;
        border-color: #28a745;
        }

        .btn-success:not(:disabled):not(.disabled):active, .btn-success:not(:disabled):not(.disabled).active,
        .show > .btn-success.dropdown-toggle {
        color: #fff;
        background-color: #1e7e34;
        border-color: #1c7430;
        }

        .btn-success:not(:disabled):not(.disabled):active:focus, .btn-success:not(:disabled):not(.disabled).active:focus,
        .show > .btn-success.dropdown-toggle:focus {
        box-shadow: 0 0 0 0.2rem rgba(72, 180, 97, 0.5);
        }

        .btn-light {
        color: #212529;
        background-color: #f8f9fa;
        border-color: #f8f9fa;
        }

        .btn-light:hover {
        color: #212529;
        background-color: #e2e6ea;
        border-color: #dae0e5;
        }

        .btn-light:focus, .btn-light.focus {
        color: #212529;
        background-color: #e2e6ea;
        border-color: #dae0e5;
        box-shadow: 0 0 0 0.2rem rgba(216, 217, 219, 0.5);
        }

        .btn-light.disabled, .btn-light:disabled {
        color: #212529;
        background-color: #f8f9fa;
        border-color: #f8f9fa;
        }

        .btn-light:not(:disabled):not(.disabled):active, .btn-light:not(:disabled):not(.disabled).active,
        .show > .btn-light.dropdown-toggle {
        color: #212529;
        background-color: #dae0e5;
        border-color: #d3d9df;
        }

        .btn-light:not(:disabled):not(.disabled):active:focus, .btn-light:not(:disabled):not(.disabled).active:focus,
        .show > .btn-light.dropdown-toggle:focus {
        box-shadow: 0 0 0 0.2rem rgba(216, 217, 219, 0.5);
        }

        .btn-dark {
        color: #fff;
        background-color: #343a40;
        border-color: #343a40;
        }

        .btn-dark:hover {
        color: #fff;
        background-color: #23272b;
        border-color: #1d2124;
        }

        .btn-dark:focus, .btn-dark.focus {
        color: #fff;
        background-color: #23272b;
        border-color: #1d2124;
        box-shadow: 0 0 0 0.2rem rgba(82, 88, 93, 0.5);
        }

        .btn-dark.disabled, .btn-dark:disabled {
        color: #fff;
        background-color: #343a40;
        border-color: #343a40;
        }

        .btn-dark:not(:disabled):not(.disabled):active, .btn-dark:not(:disabled):not(.disabled).active,
        .show > .btn-dark.dropdown-toggle {
        color: #fff;
        background-color: #1d2124;
        border-color: #171a1d;
        }

        .btn-dark:not(:disabled):not(.disabled):active:focus, .btn-dark:not(:disabled):not(.disabled).active:focus,
        .show > .btn-dark.dropdown-toggle:focus {
        box-shadow: 0 0 0 0.2rem rgba(82, 88, 93, 0.5);
        }

        .btn-outline-primary {
        color: #007bff;
        border-color: #007bff;
        }

        .btn-outline-primary:hover {
        color: #fff;
        background-color: #007bff;
        border-color: #007bff;
        }

        .btn-outline-primary:focus, .btn-outline-primary.focus {
        box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.5);
        }

        .btn-outline-primary.disabled, .btn-outline-primary:disabled {
        color: #007bff;
        background-color: transparent;
        }

        .btn-outline-primary:not(:disabled):not(.disabled):active, .btn-outline-primary:not(:disabled):not(.disabled).active,
        .show > .btn-outline-primary.dropdown-toggle {
        color: #fff;
        background-color: #007bff;
        border-color: #007bff;
        }

        .btn-outline-primary:not(:disabled):not(.disabled):active:focus, .btn-outline-primary:not(:disabled):not(.disabled).active:focus,
        .show > .btn-outline-primary.dropdown-toggle:focus {
        box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.5);
        }

        .btn-outline-secondary {
        color: #6c757d;
        border-color: #6c757d;
        }

        .btn-outline-secondary:hover {
        color: #fff;
        background-color: #6c757d;
        border-color: #6c757d;
        }

        .btn-outline-secondary:focus, .btn-outline-secondary.focus {
        box-shadow: 0 0 0 0.2rem rgba(108, 117, 125, 0.5);
        }

        .btn-outline-secondary.disabled, .btn-outline-secondary:disabled {
        color: #6c757d;
        background-color: transparent;
        }

        .btn-outline-secondary:not(:disabled):not(.disabled):active, .btn-outline-secondary:not(:disabled):not(.disabled).active,
        .show > .btn-outline-secondary.dropdown-toggle {
        color: #fff;
        background-color: #6c757d;
        border-color: #6c757d;
        }

        .btn-outline-secondary:not(:disabled):not(.disabled):active:focus, .btn-outline-secondary:not(:disabled):not(.disabled).active:focus,
        .show > .btn-outline-secondary.dropdown-toggle:focus {
        box-shadow: 0 0 0 0.2rem rgba(108, 117, 125, 0.5);
        }

        .btn-outline-success {
        color: #28a745;
        border-color: #28a745;
        }

        .btn-outline-success:hover {
        color: #fff;
        background-color: #28a745;
        border-color: #28a745;
        }

        .btn-outline-success:focus, .btn-outline-success.focus {
        box-shadow: 0 0 0 0.2rem rgba(40, 167, 69, 0.5);
        }

        .btn-outline-success.disabled, .btn-outline-success:disabled {
        color: #28a745;
        background-color: transparent;
        }

        .btn-outline-success:not(:disabled):not(.disabled):active, .btn-outline-success:not(:disabled):not(.disabled).active,
        .show > .btn-outline-success.dropdown-toggle {
        color: #fff;
        background-color: #28a745;
        border-color: #28a745;
        }

        .btn-outline-success:not(:disabled):not(.disabled):active:focus, .btn-outline-success:not(:disabled):not(.disabled).active:focus,
        .show > .btn-outline-success.dropdown-toggle:focus {
        box-shadow: 0 0 0 0.2rem rgba(40, 167, 69, 0.5);
        }

        .btn-outline-info {
        color: #17a2b8;
        border-color: #17a2b8;
        }

        .btn-outline-info:hover {
        color: #fff;
        background-color: #17a2b8;
        border-color: #17a2b8;
        }

        .btn-outline-info:focus, .btn-outline-info.focus {
        box-shadow: 0 0 0 0.2rem rgba(23, 162, 184, 0.5);
        }

        .btn-outline-info.disabled, .btn-outline-info:disabled {
        color: #17a2b8;
        background-color: transparent;
        }

        .btn-outline-info:not(:disabled):not(.disabled):active, .btn-outline-info:not(:disabled):not(.disabled).active,
        .show > .btn-outline-info.dropdown-toggle {
        color: #fff;
        background-color: #17a2b8;
        border-color: #17a2b8;
        }

        .btn-outline-info:not(:disabled):not(.disabled):active:focus, .btn-outline-info:not(:disabled):not(.disabled).active:focus,
        .show > .btn-outline-info.dropdown-toggle:focus {
        box-shadow: 0 0 0 0.2rem rgba(23, 162, 184, 0.5);
        }

        .btn-outline-warning {
        color: #ffc107;
        border-color: #ffc107;
        }

        .btn-outline-warning:hover {
        color: #212529;
        background-color: #ffc107;
        border-color: #ffc107;
        }

        .btn-outline-warning:focus, .btn-outline-warning.focus {
        box-shadow: 0 0 0 0.2rem rgba(255, 193, 7, 0.5);
        }

        .btn-outline-warning.disabled, .btn-outline-warning:disabled {
        color: #ffc107;
        background-color: transparent;
        }

        .btn-outline-warning:not(:disabled):not(.disabled):active, .btn-outline-warning:not(:disabled):not(.disabled).active,
        .show > .btn-outline-warning.dropdown-toggle {
        color: #212529;
        background-color: #ffc107;
        border-color: #ffc107;
        }

        .btn-outline-warning:not(:disabled):not(.disabled):active:focus, .btn-outline-warning:not(:disabled):not(.disabled).active:focus,
        .show > .btn-outline-warning.dropdown-toggle:focus {
        box-shadow: 0 0 0 0.2rem rgba(255, 193, 7, 0.5);
        }

        .btn-outline-danger {
        color: #dc3545;
        border-color: #dc3545;
        }

        .btn-outline-danger:hover {
        color: #fff;
        background-color: #dc3545;
        border-color: #dc3545;
        }

        .btn-outline-danger:focus, .btn-outline-danger.focus {
        box-shadow: 0 0 0 0.2rem rgba(220, 53, 69, 0.5);
        }

        .btn-outline-danger.disabled, .btn-outline-danger:disabled {
        color: #dc3545;
        background-color: transparent;
        }

        .btn-outline-danger:not(:disabled):not(.disabled):active, .btn-outline-danger:not(:disabled):not(.disabled).active,
        .show > .btn-outline-danger.dropdown-toggle {
        color: #fff;
        background-color: #dc3545;
        border-color: #dc3545;
        }

        .btn-outline-danger:not(:disabled):not(.disabled):active:focus, .btn-outline-danger:not(:disabled):not(.disabled).active:focus,
        .show > .btn-outline-danger.dropdown-toggle:focus {
        box-shadow: 0 0 0 0.2rem rgba(220, 53, 69, 0.5);
        }

        .btn-outline-light {
        color: #f8f9fa;
        border-color: #f8f9fa;
        }

        .btn-outline-light:hover {
        color: #212529;
        background-color: #f8f9fa;
        border-color: #f8f9fa;
        }

        .btn-outline-light:focus, .btn-outline-light.focus {
        box-shadow: 0 0 0 0.2rem rgba(248, 249, 250, 0.5);
        }

        .btn-outline-light.disabled, .btn-outline-light:disabled {
        color: #f8f9fa;
        background-color: transparent;
        }

        .btn-outline-light:not(:disabled):not(.disabled):active, .btn-outline-light:not(:disabled):not(.disabled).active,
        .show > .btn-outline-light.dropdown-toggle {
        color: #212529;
        background-color: #f8f9fa;
        border-color: #f8f9fa;
        }

        .btn-outline-light:not(:disabled):not(.disabled):active:focus, .btn-outline-light:not(:disabled):not(.disabled).active:focus,
        .show > .btn-outline-light.dropdown-toggle:focus {
        box-shadow: 0 0 0 0.2rem rgba(248, 249, 250, 0.5);
        }

        .btn-outline-dark {
        color: #343a40;
        border-color: #343a40;
        }

        .btn-outline-dark:hover {
        color: #fff;
        background-color: #343a40;
        border-color: #343a40;
        }

        .btn-outline-dark:focus, .btn-outline-dark.focus {
        box-shadow: 0 0 0 0.2rem rgba(52, 58, 64, 0.5);
        }

        .btn-outline-dark.disabled, .btn-outline-dark:disabled {
        color: #343a40;
        background-color: transparent;
        }

        .btn-outline-dark:not(:disabled):not(.disabled):active, .btn-outline-dark:not(:disabled):not(.disabled).active,
        .show > .btn-outline-dark.dropdown-toggle {
        color: #fff;
        background-color: #343a40;
        border-color: #343a40;
        }

        .btn-outline-dark:not(:disabled):not(.disabled):active:focus, .btn-outline-dark:not(:disabled):not(.disabled).active:focus,
        .show > .btn-outline-dark.dropdown-toggle:focus {
        box-shadow: 0 0 0 0.2rem rgba(52, 58, 64, 0.5);
        }

        .btn-link {
        font-weight: 400;
        color: #007bff;
        text-decoration: none;
        }

        .btn-link:hover {
        color: #0056b3;
        text-decoration: underline;
        }

        .btn-link:focus, .btn-link.focus {
        text-decoration: underline;
        }

        .btn-link:disabled, .btn-link.disabled {
        color: #6c757d;
        pointer-events: none;
        }

        .btn-lg, .btn-group-lg > .btn {
        padding: 0.5rem 1rem;
        font-size: 1.25rem;
        line-height: 1.5;
        border-radius: 0.3rem;
        }

        .btn-sm, .btn-group-sm > .btn {
        padding: 0.25rem 0.5rem;
        font-size: 0.875rem;
        line-height: 1.5;
        border-radius: 0.2rem;
        }

        .btn-block {
        display: block;
        width: 100%;
        }

        .btn-block + .btn-block {
        margin-top: 0.5rem;
        }

        /* Prevents green disabled button */
        .btn-primary[disabled] {
            background-color: #007bff !important;
            opacity: .40;
        }

        /* Manage disabled red */
        .btn-danger[disabled] {
            background-color: #dc3545 !important;
            opacity: .40;
        }        

        /* Manage modal hidden properly */
        .modal {
            display: none;
            border-radius: 6px !important;
            padding: 0 !important;
        }

        /* modal body margin */
        .modal-body {
            margin-top: 15px;
        }

        .modal-header .close {
           margin-top: -12px;
        }

        /* Increase modal width */
        .custom-modal-50 {
            width: 50%;
            margin-left: -25%;
        }
        .custom-modal-60 {
            width: 60%;
            margin-left: -30%;
        }
        .custom-modal-80 {
            width: 80%;
            margin-left: -40%;
        }

        .modal-big {
          height: 800px;
          max-height: 400%;
          width: 80%;
          margin-left: -40%;
        }

        .modal-guts {

          /* For Splunk 7.0.x */
          margin-top: 30px;

          /* other stuff we already covered */

          /* cover the modal */
          position: absolute;

          width: 90%;
          min-height: 400px;
          max-height: 600px;
          height: 100%;

          /* spacing as needed */
          padding: 20px 50px 20px 20px;

          /* let it scroll */
          overflow: auto;

        }

        /* fix some issues with long modals within Splunk 7.0.x */
        .modal-body {
            max-height: 700px !important;
        }

        .modal-header-success {
            color:#fff;
            padding:9px 15px;
            border-bottom:1px solid #eee;
            background-color: #5cb85c;
            -webkit-border-top-left-radius: 5px;
            -webkit-border-top-right-radius: 5px;
            -moz-border-radius-topleft: 5px;
            -moz-border-radius-topright: 5px;
            border-top-left-radius: 5px;
            border-top-right-radius: 5px;
        }
        .modal-header-warning {
            color:#fff;
            padding:9px 15px;
            border-bottom:1px solid #eee;
            background-color: #f0ad4e;
            -webkit-border-top-left-radius: 5px;
            -webkit-border-top-right-radius: 5px;
            -moz-border-radius-topleft: 5px;
            -moz-border-radius-topright: 5px;
            border-top-left-radius: 5px;
            border-top-right-radius: 5px;
        }
        .modal-header-danger {
            color:#fff;
            padding:9px 15px;
            border-bottom:1px solid #eee;
            background-color: #d9534f;
            -webkit-border-top-left-radius: 5px;
            -webkit-border-top-right-radius: 5px;
            -moz-border-radius-topleft: 5px;
            -moz-border-radius-topright: 5px;
            border-top-left-radius: 5px;
            border-top-right-radius: 5px;
        }
        .modal-header-info {
            color:#fff;
            padding:9px 15px;
            border-bottom:1px solid #eee;
            background-color: #5bc0de;
            -webkit-border-top-left-radius: 5px;
            -webkit-border-top-right-radius: 5px;
            -moz-border-radius-topleft: 5px;
            -moz-border-radius-topright: 5px;
            border-top-left-radius: 5px;
            border-top-right-radius: 5px;
        }
        .modal-header-primary {
            color:#fff !important;
            padding:9px 15px !important;
            border-bottom:1px solid #eee !important;
            background-color: #428bca !important;
            -webkit-border-top-left-radius: 5px !important;
            -webkit-border-top-right-radius: 5px !important;
            -moz-border-radius-topleft: 5px !important;
            -moz-border-radius-topright: 5px !important;
            border-top-left-radius: 5px !important;
            border-top-right-radius: 5px !important;
        }

        /* Fix link input object align */
        .input-linklist {
          display: inline !important;
        }

        /* Fix link input object align for Splunk 6.5 */
        .input-link {
          display: inline !important;
        }

        /* reduce size of the token input panel */
        .input-link label{
          display: none !important;
        }

        .splunk-choice-input-message{
          display: none !important;
        }

        /* Increase the default max-width for links */
        .btn-pill {
          max-width: 600px !important;
        }

        .custom-btn {
            float: left;
            margin-top:15px;
        }

        span.title_yellow {
            background: #ffd700;
            padding: 0.3em 1.5em;
            font-weight: 600;
            position: relative;
            border-radius: 5px;
            margin-left: 5px;
        }

        span.title_orange {
            background: #ffb347;
            padding: 0.3em 1.5em;
            font-weight: 600;
            position: relative;
            border-radius: 5px;
            margin-left: 5px;
        }

        span.title_green {
            background: #77dd77;
            padding: 0.3em 1.5em;
            font-weight: 600;
            position: relative;
            border-radius: 5px;
            margin-left: 5px;
        }

        span.title_red {
            background: #ff6961;
            padding: 0.3em 1.5em;
            font-weight: 600;
            position: relative;
            border-radius: 5px;
            margin-left: 5px;
        }

        span.title_grey {
            background: #808080;
            padding: 0.3em 1.5em;
            font-weight: 600;
            position: relative;
            border-radius: 5px;
            margin-left: 5px;
        }

        .imgheader36 img {
            float: left;
            width: 36px;
            height: 36px;
        }

        .imgheader36 h1 {
            color: lightslategrey;
            text-align: left;
            position: relative;
            top: 9px;
            left: 10px;
        }

        .imgheader36 h3 {
            position: relative;
            top: 8px;
            left: -10px;
        }

        .imgminiheader img {
            position: relative;
            top: -4px;
        }

        </style>
</head>
<body class="simplexml preload locale-en" data-splunk-version="" data-splunk-product="enterprise">
<!--
BEGIN LAYOUT
This section contains the layout for the dashboard. Splunk uses proprietary
styles in <div> tags, similar to Bootstrap's grid system.
-->
<header>
    <a class="navSkip" href="#navSkip" tabindex="1">Screen reader users, click here to skip the navigation bar</a>
    <div class="header splunk-header">
        <div id="placeholder-splunk-bar">
            <a href="{{SPLUNKWEB_URL_PREFIX}}/app/launcher/home" class="brand" title="splunk &gt; listen to your data">splunk<strong>&gt;</strong></a>
        </div>
        <div id="placeholder-app-bar"></div>
    </div>
    <a id="navSkip"></a>
</header>
<div class="dashboard-body container-fluid main-section-body" data-role="main">
    <div class="dashboard-header clearfix">
        <h2>TrackMe Manage and configure</h2>
         <p></p>
    </div>

    <div style="display: none;" class="fieldset">
    </div>

    <!-- Error or failure during KVstore collection update -->
    <div class="modal fade" id="modal_update_collection_failure_return" role="dialog">
        <div class="modal-dialog">

            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header modal-header-danger">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h3 style="color: white;"><span class="glyphicon glyphicon-lock"></span>Oops!</h3>
                </div>
                <div class="modal-body">
                    <p>Sorry but it looks like an error occurred while attempting to perform the KVstore collection update.<br /><br />
                        <b>You might not have the permission to write to the collection</b>, or an unexpected failure was encountered.<br /><br />
                        <b>The server returned the following error message:</b>
                    </p>
                    <div class="modal-error-message" style="margin: 10px 0; padding: 10px; border-radius: 3px 3px 3px 3px; color: #D8000C; background-color: #FFBABA;">
                        <p>error return message</p>
                    </div>
                </div>

                <div class="modal-footer">
                    <button type="submit" class="btn btn-default btn-default pull-right" data-dismiss="modal"><span class="glyphicon glyphicon-remove"></span> Close</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Reset data source collection -->
    <div class="modal fade" id="modal_reset_data_host" role="dialog">
        <div class="modal-dialog">

            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header modal-header-danger">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h3 style="color: white;"><span class="glyphicon glyphicon-lock"></span>Data collection reset</h3>
                </div>
                <div class="modal-body">
                    <p><b>Are you sure that you want to reset the data host collection?</b><br /><br />
                        All changes in the collection will be irremediably lost and trackers will be automatically started to populate a fresh collection version.
                        <br /><br />
                        <b>Which changes will be affected?</b>
                        <br />
                        <lu>
                            <li>modifications of lagging values for all entries</li>
                            <li>modifications of week days rules for all entries</li>
                        </lu>
                        <br />
                        <b>Whitelisted/Blacklisted items will not be touched at any level, and will be preserved in their current state.</b>
                    </p>
                </div>

                <div class="modal-footer">
                    <button type="submit" class="btn btn-default btn-default pull-left" data-dismiss="modal"><span class="glyphicon glyphicon-remove"></span> Cancel</button>
                    <button type="submit" id="btn_modal_reset_data_host_confirmed" class="btn btn-default btn-danger pull-right" data-dismiss="modal"><span class="glyphicon glyphicon-remove"></span> Ok</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Reset data source collection -->
    <div class="modal fade" id="modal_reset_data_source" role="dialog">
        <div class="modal-dialog">

            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header modal-header-danger">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h3 style="color: white;"><span class="glyphicon glyphicon-lock"></span>Data collection reset</h3>
                </div>
                <div class="modal-body">
                    <p><b>Are you sure that you want to reset the data source collection?</b><br /><br />
                        All changes in the collection will be irremediably lost and trackers will be automatically started to populate a fresh collection version.
                        <br /><br />
                        <b>Which changes will be affected?</b>
                        <br />
                        <lu>
                            <li>modifications of lagging values for all entries</li>
                            <li>modifications of week days rules for all entries</li>
                            <li>modifications of monitoring level for all entries</li>
                        </lu>
                        <br />
                        <b>Whitelisted/Blacklisted items will not be touched at any level, and will be preserved in their current state.</b>
                    </p>
                </div>

                <div class="modal-footer">
                    <button type="submit" class="btn btn-default btn-default pull-left" data-dismiss="modal"><span class="glyphicon glyphicon-remove"></span> Cancel</button>
                    <button type="submit" id="btn_modal_reset_data_source_confirmed" class="btn btn-default btn-danger pull-right" data-dismiss="modal"><span class="glyphicon glyphicon-remove"></span> Ok</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Reset data source collection -->
    <div class="modal fade" id="modal_reset_metric_host" role="dialog">
        <div class="modal-dialog">

            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header modal-header-danger">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h3 style="color: white;"><span class="glyphicon glyphicon-lock"></span>Metric collection reset</h3>
                </div>
                <div class="modal-body">
                    <p><b>Are you sure that you want to reset the metric host collection?</b><br /><br />
                        All changes in the collection will be irremediably lost and the metric tracker will be automatically started to populate a fresh collection version.
                        <br /><br />
                        <b>Which changes will be affected?</b>
                        <br />
                        <lu>
                            <li>List of metric hosts in the collection</li>
                            <li>Activation state of collection entries</li>
                        </lu>
                        <br />
                        <b>Whitelisted/Blacklisted items and metric SLA policies will not be touched at any level, and will be preserved in their current state.</b>
                    </p>
                </div>

                <div class="modal-footer">
                    <button type="submit" class="btn btn-default btn-default pull-left" data-dismiss="modal"><span class="glyphicon glyphicon-remove"></span> Cancel</button>
                    <button type="submit" id="btn_modal_reset_metric_host_confirmed" class="btn btn-default btn-danger pull-right" data-dismiss="modal"><span class="glyphicon glyphicon-remove"></span> Ok</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Reset done -->
    <div class="modal fade" id="modal_reset_done" role="dialog">
        <div class="modal-dialog">

            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header modal-header-danger">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h3 style="color: white;"><span class="glyphicon glyphicon-lock"></span>Success</h3>
                </div>
                <div class="modal-body">
                    <h3>The collection was successfully reset.</h3>
                </div>

                <div class="modal-footer">
                    <button type="submit" class="btn btn-default btn-primary pull-right" data-dismiss="modal"><span class="glyphicon glyphicon-remove"></span> Ok!</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Custom split by input modal -->
    <div class="modal fade" id="modal_input_split_by_custom" role="dialog">
        <div class="modal-dialog">

            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header modal-header-danger">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h3 style="color: white;"><span class="glyphicon glyphicon-lock"></span>Custom split by mode</h3>
                </div>
                <div class="modal-body">

                    <h2>Provide the custom indexed field to be used for entities discovery and by statement:</h2>
                    <h3><i>The field must be an indexed field, you cannot specify more than one field and special characters are not allowed.</i></h3>
                    <input type="text" id="input_split_by_custom_field" style="width: 300px;"/>

                </div>

                <div class="modal-footer">
                    <button type="submit" class="btn btn-default btn-default pull-left" data-dismiss="modal"><span class="glyphicon glyphicon-remove"></span> Cancel</button>
                    <button type="submit" id="btn_modal_input_split_by_custom_field" disabled='disabled' class="btn btn-default btn-primary pull-right" data-dismiss="modal"><span class="glyphicon glyphicon-remove"></span> Confirm</button>
                </div>
            </div>
        </div>
    </div>

    <!-- START MAIN -->

    <div id="rowManageResetInfo" class="dashboard-row dashboard-rowManageResetInfo">
        <div id="panelManageResetInfo" class="dashboard-cell" style="width: 100%;">
            <div class="dashboard-panel clearfix">
                <div class="panel-element-row">
                    <div id="elementManageResetInfo" class="dashboard-element html" style="width: 100%">
                        <div class="panel-body html">
                            <div style="text-align: center; border: 3px dashed #ccc;">
                                <div style="display: inline-flex; align-items: center; margin-top: 5px;">
                                    <span style="font-size: 22px; font-weight: bold; color: #6495ed; margin-top: 5px;">RESET COLLECTIONS</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div id="rowManage" class="dashboard-row dashboard-row1" data-original-id="rowManage">
        <div id="panelManage1" class="dashboard-cell" style="width: 100%;">
            <div class="dashboard-panel clearfix">
                <div id="ManageRow1" class="dashboard-row dashboard-row1">
                    <div id="ManageRow1Panel1" class="dashboard-cell" style="width: 33%;">
                        <div class="dashboard-panel clearfix">
                            <div class="panel-element-row">
                                <div id="ManageRow1Panel1Element1" class="dashboard-element html" style="width: 100%">
                                    <div class="panel-body html">
                                        <div>
                                            <div style="margin-bottom: 15px;" class="custom-btn">
                                                <h2>Use this function to reset the <b>data_source</b> collection and automatically run trackers:</h2>
                                                <button type="submit" id="btn_manage_reset_data_source" style="margin-right: 15px;" class="btn btn-default btn-danger" data-dismiss="modal"><span class="glyphicon glyphicon-remove"></span> Manage: reset collection</button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div id="ManageRow1Panel2" class="dashboard-cell" style="width: 33%;">
                        <div class="dashboard-panel clearfix">
                            <div class="panel-element-row">
                                <div id="ManageRow1Panel1Element2" class="dashboard-element html" style="width: 100%">
                                    <div class="panel-body html">
                                        <div>
                                            <div style="margin-bottom: 15px;" class="custom-btn">
                                                <h2>Use this function to reset the <b>data_host</b> collection and automatically run trackers:</h2>
                                                <button type="submit" id="btn_manage_reset_data_host" style="margin-right: 15px;" class="btn btn-default btn-danger" data-dismiss="modal"><span class="glyphicon glyphicon-remove"></span> Manage: reset collection</button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div id="ManageRow1Panel3" class="dashboard-cell" style="width: 33%;">
                        <div class="dashboard-panel clearfix">
                            <div class="panel-element-row">
                                <div id="ManageRow1Panel1Element3" class="dashboard-element html" style="width: 100%">
                                    <div class="panel-body html">
                                        <div>
                                            <div style="margin-bottom: 15px;" class="custom-btn">
                                                <h2>Use this function to reset the <b>metric_host</b> collection and automatically run trackers:</h2>
                                                <button type="submit" id="btn_manage_reset_metric_host" style="margin-right: 15px;" class="btn btn-default btn-danger" data-dismiss="modal"><span class="glyphicon glyphicon-remove"></span> Manage: reset collection</button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                </div>
            </div>
        </div>
    </div>

    <div id="rowManageBehaviourAnalytic" class="dashboard-row dashboard-rowManageResetInfo">
        <div id="panelManageBehaviourAnalytic" class="dashboard-cell" style="width: 100%;">
            <div class="dashboard-panel clearfix">
                <div class="panel-element-row">
                    <div id="elementManageBehaviourAnalytic" class="dashboard-element html" style="width: 100%">
                        <div class="panel-body html">
                            <div style="text-align: center; border: 3px dashed #ccc;">
                                <div style="display: inline-flex; align-items: center; margin-top: 5px;">
                                    <span style="font-size: 22px; font-weight: bold; color: #6495ed; margin-top: 5px;">BEHAVIOUR ANALYTIC MODE</span>
                                </div>
                                <div style="margin-left: 50px; margin-right: 50px; margin-top: 20px; margin-bottom: 20px; text-align: justify;">
                                    <h2>Manage the behaviour analytic mode, when the Production mode is enabled, true positive alerts will generate a red state, in training mode these will generate an orange state, in disabled mode these will not impact the state.</h2>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div id="rowManageBehaviourAnalytic1" class="dashboard-row dashboard-row_maintenance">
        <div id="panelManageBehaviourAnalytic1" class="dashboard-cell" style="width: 50%;">
            <div class="dashboard-panel clearfix">
                <h2 class="panel-title"></h2>
                <div class="fieldset" style="text-align: center;">
                    <div class="form-submit" id="btn_enable_production_mode">
                        <button id="btn_enable_production_mode_confirm" class="btn btn-danger submit">Enable production mode</button>
                    </div>
                </div>
            </div>
        </div>
        <div id="rowManageBehaviourAnalytic2" class="dashboard-cell" style="width: 50%;">
            <div class="dashboard-panel clearfix">
                <h2 class="panel-title"></h2>
                <div class="fieldset" style="text-align: center;">
                    <div class="form-submit" id="btn_enable_training_mode">
                        <button id="btn_enable_training_mode_confirm" class="btn btn-primary submit">Enable training mode</button>
                    </div>
                </div>
            </div>
        </div>
        <div id="rowManageBehaviourAnalytic3" class="dashboard-cell" style="width: 50%;">
            <div class="dashboard-panel clearfix">
                <h2 class="panel-title"></h2>
                <div class="fieldset" style="text-align: center;">
                    <div class="form-submit" id="btn_disabled_mode">
                        <button id="btn_disabled_mode_confirm" class="btn btn-primary submit">Disable behaviour analytic</button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div id="rowManageDataSourceMode" class="dashboard-row dashboard-rowManageResetInfo">
        <div id="panelManageDataSourceMode" class="dashboard-cell" style="width: 100%;">
            <div class="dashboard-panel clearfix">
                <div class="panel-element-row">
                    <div id="elementDataSourceMode" class="dashboard-element html" style="width: 100%">
                        <div class="panel-body html">
                            <div style="text-align: center; border: 3px dashed #ccc;">
                                <div style="display: inline-flex; align-items: center; margin-top: 5px;">
                                    <span style="font-size: 22px; font-weight: bold; color: #6495ed; margin-top: 5px;">DATA SOURCE MODE</span>
                                </div>
                                <div style="margin-left: 50px; margin-right: 50px; margin-top: 20px; margin-bottom: 20px; text-align: justify;">
                                    <h2>The <b>split mode</b> defines the default behaviour for data sources monitoring, which is to discover and maintain entities based on "index + ":" + sourcetype"
                                        <br /><br />
                                        Alternatively, you can use a different default mode depending on your needs:                                        
                                        <lu>
                                            <li><b>split by custom</b> mode (index + ":" + sourcetype + "|fieldName:" + fieldValue), in this mode you specify a custom indexed field for the discovery and breaking purposes</li>
                                            <li><b>merged mode</b> which considers the index globally (index + ":" + "all"), the entity represents the whole index and all of its data</li>
                                            <li><b>Cribl mode</b> to automatically discover and maintain entities based on the cribl pipe Metadata for Cribl Logstream customers</li>
                                        </lu>
                                        <br />
                                        After the mode is changed, proceed to a reset of the collection to discover entities based on the new scheme (button Manage: reset collection for data sources) and cleanout previously discovered entities.
                                    </h2>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div id="rowManageDataSourceMode1" class="dashboard-row dashboard-row_maintenance">

        <div id="panelManageDataSourceMode1" class="dashboard-cell" style="width: 25%;">
            <div class="dashboard-panel clearfix">
                <h2 class="panel-title"></h2>
                <div class="fieldset" style="text-align: center;">
                    <div class="form-submit" id="btn_data_source_split_mode">
                        <button id="btn_enable_data_source_split_mode" class="btn btn-primary submit">Enable split mode</button>
                    </div>
                </div>
            </div>
        </div>
        <div id="panelManageDataSourceMode2" class="dashboard-cell" style="width: 25%;">
            <div class="dashboard-panel clearfix">
                <h2 class="panel-title"></h2>
                <div class="fieldset" style="text-align: center;">
                    <div class="form-submit" id="btn_data_source_split_by_custom_mode">
                        <button id="btn_enable_data_source_split_by_custom_mode" class="btn btn-primary submit">Enable split custom mode</button>
                    </div>
                </div>
            </div>
        </div>
        <div id="rowManageDataSourceMode3" class="dashboard-cell" style="width: 25%;">
            <div class="dashboard-panel clearfix">
                <h2 class="panel-title"></h2>
                <div class="fieldset" style="text-align: center;">
                    <div class="form-submit" id="btn_data_source_merged_mode">
                        <button id="btn_enable_data_source_merged_mode" class="btn btn-primary submit">Enable merged mode</button>
                    </div>
                </div>
            </div>
        </div>
        <div id="rowManageDataSourceMode4" class="dashboard-cell" style="width: 25%;">
            <div class="dashboard-panel clearfix">
                <h2 class="panel-title"></h2>
                <div class="fieldset" style="text-align: center;">
                    <div class="form-submit" id="btn_data_source_merged_mode">
                        <button id="btn_enable_data_source_cribl_mode" class="btn btn-primary submit">Enable CRIBL mode</button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div id="rowManageDataHostAlertPolicy" class="dashboard-row dashboard-rowManageResetInfo">
        <div id="panelManageDDataHostAlertPolicy" class="dashboard-cell" style="width: 100%;">
            <div class="dashboard-panel clearfix">
                <div class="panel-element-row">
                    <div id="elementDataHostAlertPolicyg" class="dashboard-element html" style="width: 100%">
                        <div class="panel-body html">
                            <div style="text-align: center; border: 3px dashed #ccc;">
                                <div style="display: inline-flex; align-items: center; margin-top: 5px;">
                                    <span style="font-size: 22px; font-weight: bold; color: #6495ed; margin-top: 5px;">DATA HOST GLOBAL ALERTING POLICY</span>
                                </div>
                                <div style="margin-left: 50px; margin-right: 50px; margin-top: 20px; margin-bottom: 20px; text-align: justify;">
                                    <h2>The default behaviour for data hosts monitoring is to turn host states in red mode when <b>all of the known sourcetypes</b> have stopped emitting data in a way that monitoring conditions are not met. (if any sourcetype continues to be indexed and monitoring conditions are met, the host is green)
                                        <br />
                                        You can change the global policy to the <b>track per sourcetype</b> mode which configures TrackMe to turn an host status to red if at least one sourcetypes is actually red. (to be green, all sourcetypes must be green)
                                        This policy can defined widely in this configuration screen, and on a per data host basis in the data host configuration screen. 
                                    </h2>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div id="rowManageDataHostAlertPolicy1" class="dashboard-row dashboard-row_maintenance">
        <div id="rowManageDataHostAlertPolicy2" class="dashboard-cell" style="width: 50%;">
            <div class="dashboard-panel clearfix">
                <h2 class="panel-title"></h2>
                <div class="fieldset" style="text-align: center;">
                    <div class="form-submit" id="btn_host_policy_track_per_host">
                        <button id="btn_enable_data_host_policy_per_host" class="btn btn-primary submit">Enable global policy per host</button>
                    </div>
                </div>
            </div>
        </div>
        <div id="rowManageDataHostAlertPolicy3" class="dashboard-cell" style="width: 50%;">
            <div class="dashboard-panel clearfix">
                <h2 class="panel-title"></h2>
                <div class="fieldset" style="text-align: center;">
                    <div class="form-submit" id="btn_host_policy_track_per_sourcetype">
                        <button id="btn_enable_data_host_policy_per_sourcetype" class="btn btn-primary submit">Enable global policy per sourcetype</button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div id="rowManageDataHostMonitorSplunk" class="dashboard-row dashboard-rowManageResetInfo">
        <div id="panelManageDDataHostMonitorSplunk" class="dashboard-cell" style="width: 100%;">
            <div class="dashboard-panel clearfix">
                <div class="panel-element-row">
                    <div id="elementDataHostMonitorSplunkg" class="dashboard-element html" style="width: 100%">
                        <div class="panel-body html">
                            <div style="text-align: center; border: 3px dashed #ccc;">
                                <div style="display: inline-flex; align-items: center; margin-top: 5px;">
                                    <span style="font-size: 22px; font-weight: bold; color: #6495ed; margin-top: 5px;">DATA HOST MONITOR SPLUNK</span>
                                </div>
                                <div style="margin-left: 50px; margin-right: 50px; margin-top: 20px; margin-bottom: 20px; text-align: justify;">
                                    <h2>The default behaviour is to track Splunk instances activity via the Splunk internal data (index=_internal sourcetype=splunkd) in the same way we track any other types of sourcetype made accessible to TrackMe.<br />
                                    This can be disabled bellow if you do not want to track Splunk instances as part of the data host tracking workflow:
                                    </h2>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div id="rowManageDataHostMonitorSplunk1" class="dashboard-row dashboard-row_maintenance">
        <div id="rowManageDataHostMonitorSplunk2" class="dashboard-cell" style="width: 50%;">
            <div class="dashboard-panel clearfix">
                <h2 class="panel-title"></h2>
                <div class="fieldset" style="text-align: center;">
                    <div class="form-submit" id="btn_host_policy_track_per_host">
                        <button id="btn_enable_data_host_splunkd" class="btn btn-primary submit">Enable Splunk monitoring</button>
                    </div>
                </div>
            </div>
        </div>
        <div id="rowManageDataHostMonitorSplunk3" class="dashboard-cell" style="width: 50%;">
            <div class="dashboard-panel clearfix">
                <h2 class="panel-title"></h2>
                <div class="fieldset" style="text-align: center;">
                    <div class="form-submit" id="btn_host_policy_track_per_sourcetype">
                        <button id="btn_disable_data_host_splunkd" class="btn btn-primary submit">Disable Splunk monitoring</button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div id="rowManageDataSampling" class="dashboard-row dashboard-rowManageResetInfo">
        <div id="panelManageDataSampling" class="dashboard-cell" style="width: 100%;">
            <div class="dashboard-panel clearfix">
                <div class="panel-element-row">
                    <div id="elementManageDataSampling" class="dashboard-element html" style="width: 100%">
                        <div class="panel-body html">
                            <div style="text-align: center; border: 3px dashed #ccc;">
                                <div style="display: inline-flex; align-items: center; margin-top: 5px;">
                                    <span style="font-size: 22px; font-weight: bold; color: #6495ed; margin-top: 5px;">DATA SAMPLING &amp; EVENTS FORMAT RECOGNITION</span>
                                </div>
                                <div style="margin-left: 50px; margin-right: 50px; margin-top: 20px; margin-bottom: 20px; text-align: justify;">
                                    <h2>The data sampling &amp; format recognition allows to automatically monitor raw events formats changes and misbehaviour. 
                                        <br />By default, the data sampling mode stores samples of indexed events in a clear text format in a dedicated KVstore collection.
                                        <br />You can optionnally decide to obfuscate these samples during the data sampling engine execution to avoid unwanted data access.     
                                        <br />In addition, there are different macros that can be customised to adjust some of the feature configuration.</h2>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div id="rowManageDataSamplingObfuscation1" class="dashboard-row dashboard-row_maintenance">
        <div id="panelManageDataSamplingObfuscation1" class="dashboard-cell" style="width: 50%;">
            <div class="dashboard-panel clearfix">
                <h2 class="panel-title"></h2>
                <div class="fieldset" style="text-align: center;">
                    <div class="form-submit" id="btn_submit_data_sampling_obfuscate_enable">
                        <button id="btn_data_sampling_obfuscate_enable" class="btn btn-primary submit">Enable Data Sampling obfuscation mode</button>
                    </div>
                </div>
            </div>
        </div>
        <div id="panelManageDataSamplingObfuscation2" class="dashboard-cell" style="width: 50%;">
            <div class="dashboard-panel clearfix">
                <h2 class="panel-title"></h2>
                <div class="fieldset" style="text-align: center;">
                    <div class="form-submit" id="btn_submit_data_sampling_obfuscate_disable">
                        <button id="btn_data_sampling_obfuscate_disable" class="btn btn-primary submit">Disable Data Sampling obfuscation mode</button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div id="ManageRow_trackme_data_sampling_max_allowed_runtime_sec" class="dashboard-row dashboard-rowDataSourcesTable" >
        <div id="panel_trackme_data_sampling_max_allowed_runtime_sec" class="dashboard-cell" style="width: 100%;">
            <div class="dashboard-panel clearfix">
                <h2 style="padding: 12px 55px 7px 12px;">trackme_data_sampling_max_allowed_runtime_sec</h2><h2 class="panel-title">This defines the maximal amount of time in seconds to allow for the run time of the data sampling and event format recognition tracker, this value is
                    used to automatically calculate the number of data sources to be processed per iteration based on the previous schedule run time performance. Increasing this value would allow processing more data sources in a single execution, and perform sampling and event format reconigition more often. 
                </h2>
                <div class="panel-element-row">
                    <div id="elementTable_trackme_data_sampling_max_allowed_runtime_sec" class="dashboard-element table" style="width: 100%">
                        <div class="panel-body"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div id="ManageRow_trackme_data_sampling_default_sample_record_at_discovery" class="dashboard-row dashboard-rowDataSourcesTable" >
        <div id="panel_trackme_data_sampling_default_sample_record_at_discovery" class="dashboard-cell" style="width: 100%;">
            <div class="dashboard-panel clearfix">
                <h2 style="padding: 12px 55px 7px 12px;">trackme_data_sampling_default_sample_record_at_discovery</h2><h2 class="panel-title">This defines the number of events to sample the very first time the data sample engine runs against this data source, this bigger this value is, the more accurate the event format reconigition will be. (defaults to 100 events per data source)
                </h2>
                <div class="panel-element-row">
                    <div id="elementTable_trackme_data_sampling_default_sample_record_at_discovery" class="dashboard-element table" style="width: 100%">
                        <div class="panel-body"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div id="ManageRow_trackme_data_sampling_default_sample_record_at_run" class="dashboard-row dashboard-rowDataSourcesTable" >
        <div id="panel_trackme_data_sampling_default_sample_record_at_run" class="dashboard-cell" style="width: 100%;">
            <div class="dashboard-panel clearfix">
                <h2 style="padding: 12px 55px 7px 12px;">trackme_data_sampling_default_sample_record_at_run</h2><h2 class="panel-title">This defines the number of events to sample during every new execution of the data sample engine runs against this data source post discovery, this bigger this value is, the more accurate the event format reconigition will be. (defaults to 50 events per data source)
                </h2>
                <div class="panel-element-row">
                    <div id="elementTable_trackme_data_sampling_default_sample_record_at_run" class="dashboard-element table" style="width: 100%">
                        <div class="panel-body"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div id="rowManageEnrichmentMacrosInfo" class="dashboard-row dashboard-rowManageResetInfo">
        <div id="panelManageEnrichmentMacrosInfo" class="dashboard-cell" style="width: 100%;">
            <div class="dashboard-panel clearfix">
                <div class="panel-element-row">
                    <div id="elementManageEnrichmentMacrosInfo" class="dashboard-element html" style="width: 100%">
                        <div class="panel-body html">
                            <div style="text-align: center; border: 3px dashed #ccc;">
                                <div style="display: inline-flex; align-items: center; margin-top: 5px;">
                                    <span style="font-size: 22px; font-weight: bold; color: #6495ed; margin-top: 5px;">TAGS ENRICHMENT MACRO DEFINITIONS</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div id="rowManageEnrichmentMacrosInfoExtended" class="dashboard-row dashboard-rowManageResetInfo">
        <div id="panelManageEnrichmentMacrosInfoExtended" class="dashboard-cell" style="width: 100%;">
            <div class="dashboard-panel clearfix">
                <div class="panel-element-row">
                    <div id="elementManageEnrichmentMacrosInfoExtended" class="dashboard-element html" style="width: 100%">
                        <div class="panel-body html">
                            <div>

                                <div class="imgheader36">
                                    <img style="float: left; margin: 0px 15px 15px 0px;" src="../../static/app/trackme/icons/tags.png"/></span>
                                    <h3>Object tags:</h3>
                                    <br />
                                </div>

                                <br />
                                <p>Tags enrichment is made available when investigating a data or metric host within the user interface, to provide valuable context and get benefit from assets information available in the Splunk deployment.

                                <br /><br />
                                <b><i>Splunk Enterprise Security assets usage:</i></b>
                                <br /><br />

                                If TrackMe is running on the same search head than Enterprise Security and you wish to use its assets knowledge, customize the macro with <code> `get_asset(data_host)`</code> for data hosts, and <code>`get_asset(metric_host)`</code> for metric hosts.
                                <br />
                                If Enterprise Security is running on a different search head, one option is to define a summary scheduled report on the ES search head, then a scheduled report that will use the summary data to automatically build a copy of Enterprise Security assets lookup. (asset_lookup_by_str)
                                Customize the macro with a call to lookup <code>lookup name_of_lookup key as data_host</code> for data_hosts, and <code>lookup name_of_lookup key as metric_host</code> for metric_hosts.
                                <br /><br />

                                <b><i>Any kind of CMDB data available in Splunk:</i></b>
                                <br /><br />
                                Similarly you can use any lookup available in the Splunk instance which provides Assets context looking up a key which in most cases would be host name, dns name or IP address.
                                <br />
                                Make sure your asset lookup definition is exported to the system, is case insensitive and contains the relevant information, then customize the macros depending on your configuration, example: <code>lookup name_of_lookup key as data_hosts</code> for data hosts, <code>lookup name_of_lookup key as metric_hosts</code> for metric hosts.


                                </p>

                            </div>

                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div id="ManageRowEnrichmentMacro1" class="dashboard-row dashboard-rowDataSourcesTable">
        <div id="panelManageEnrichmentMacro1" class="dashboard-cell" style="width: 100%;">
            <div class="dashboard-panel clearfix">
                <h2 style="padding: 12px 55px 7px 12px;">trackme_get_data_host_tags</h2><h2 class="panel-title">Macro definition for data host tags enrichment</h2>
                <div class="panel-element-row">
                    <div id="elementTable_trackme_get_data_host_tags" class="dashboard-element table" style="width: 100%">
                        <div class="panel-body"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div id="ManageRowEnrichmentMacro2" class="dashboard-row dashboard-rowDataSourcesTable">
        <div id="panelManageEnrichmentMacro2" class="dashboard-cell" style="width: 100%;">
            <div class="dashboard-panel clearfix">
                <h2 style="padding: 12px 55px 7px 12px;">trackme_get_metric_host_tags</h2><h2 class="panel-title">Macro definition for metric host tags enrichment</h2>
                <div class="panel-element-row">
                    <div id="elementTable_trackme_get_metric_host_tags" class="dashboard-element table" style="width: 100%">
                        <div class="panel-body"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div id="rowManageMacrosInfo" class="dashboard-row dashboard-rowManageResetInfo">
        <div id="panelManageMacrosInfo" class="dashboard-cell" style="width: 100%;">
            <div class="dashboard-panel clearfix">
                <div class="panel-element-row">
                    <div id="elementManageMacrosInfo" class="dashboard-element html" style="width: 100%">
                        <div class="panel-body html">
                            <div style="text-align: center; border: 3px dashed #ccc;">
                                <div style="display: inline-flex; align-items: center; margin-top: 5px;">
                                    <span style="font-size: 22px; font-weight: bold; color: #6495ed; margin-top: 5px;">MAIN MACROS DEFINITIONS</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div id="ManageRowMacro1" class="dashboard-row dashboard-rowDataSourcesTable">
        <div id="panelManageMacro1" class="dashboard-cell" style="width: 100%;">
            <div class="dashboard-panel clearfix">
                <h2 style="padding: 12px 55px 7px 12px;">trackme_tstats</h2><h2 class="panel-title">Macro definition for every call to the tstats command in the application: (click on the table below to edit the macro definition)</h2>
                <div class="panel-element-row">
                    <div id="elementTable_tstats" class="dashboard-element table" style="width: 100%">
                        <div class="panel-body"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div id="ManageRowMacro2" class="dashboard-row dashboard-rowDataSourcesTable" >
        <div id="panelManage2" class="dashboard-cell" style="width: 100%;">
            <div class="dashboard-panel clearfix">
                <h2 style="padding: 12px 55px 7px 12px;">trackme_tstats_main_filter</h2><h2 class="panel-title">The default behaviour of TrackMe is to track data available in all indexes, a macro is used within each tracker which can be modified if you wish to restrict TrackMe to a given list of indexes or any other valid Meta data filter: (click on the table below to edit the macro definition)</h2>
                <div class="panel-element-row">
                    <div id="elementTable_trackme_tstats_main_filter" class="dashboard-element table" style="width: 100%">
                        <div class="panel-body"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div id="ManageRowMacro3" class="dashboard-row dashboard-rowDataSourcesTable" >
        <div id="panelManage3" class="dashboard-cell" style="width: 100%;">
            <div class="dashboard-panel clearfix">
                <h2 style="padding: 12px 55px 7px 12px;">trackme_idx_filter</h2><h2 class="panel-title">The builtin views “Ops: Indexes queues” and “Ops: Parsing issues” rely on the usage of the following macro: (click on the table below to edit the macro definition)</h2>
                <div class="panel-element-row">
                    <div id="elementTable_trackme_idx_filter" class="dashboard-element table" style="width: 100%">
                        <div class="panel-body"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div id="ManageRowMacro3b" class="dashboard-row dashboard-rowDataSourcesTable" >
        <div id="panelManage3b" class="dashboard-cell" style="width: 100%;">
            <div class="dashboard-panel clearfix">
                <h2 style="padding: 12px 55px 7px 12px;">trackme_metrics_idx: metric index for TrackMe</h2><h2 class="panel-title">The Summary Investigator tracker generates metrics to be indexed into a metric index which is defined in the following macro: (default to index=trackme_metrics, click on the table below to edit the macro definition)</h2>
                <div class="panel-element-row">
                    <div id="elementTable_trackme_metrics_idx" class="dashboard-element table" style="width: 100%">
                        <div class="panel-body"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div id="ManageRowMacro3c" class="dashboard-row dashboard-rowDataSourcesTable" >
        <div id="panelManage3c" class="dashboard-cell" style="width: 100%;">
            <div class="dashboard-panel clearfix">
                <h2 style="padding: 12px 55px 7px 12px;">trackme_idx: summary index for TrackMe</h2><h2 class="panel-title">The app will generate summary events which target index which is defined in the following macro: (default to index=summary, click on the table below to edit the macro definition)</h2>
                <div class="panel-element-row">
                    <div id="elementTable_trackme_idx_summary" class="dashboard-element table" style="width: 100%">
                        <div class="panel-body"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div id="rowManageMacrosInfoBehaviourAnalytic" class="dashboard-row dashboard-rowManageResetInfo">
        <div id="panelManageMacrosInfoBehaviourAnalytic" class="dashboard-cell" style="width: 100%;">
            <div class="dashboard-panel clearfix">
                <div class="panel-element-row">
                    <div id="elementManageMacrosInfoBehaviourAnalytic" class="dashboard-element html" style="width: 100%">
                        <div class="panel-body html">
                            <div style="text-align: center; border: 3px dashed #ccc;">
                                <div style="display: inline-flex; align-items: center; margin-top: 5px;">
                                    <span style="font-size: 22px; font-weight: bold; color: #6495ed; margin-top: 5px;">BEHAVIOUR ANALYTIC MACROS DEFINITIONS</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div id="ManageRowMacro4b" class="dashboard-row dashboard-rowDataSourcesTable" >
        <div id="panelManage4b" class="dashboard-cell" style="width: 100%;">
            <div class="dashboard-panel clearfix">
                <h2 style="padding: 12px 55px 7px 12px;">trackme_default_enable_behaviour_analytic: default enabled status for behaviour analytic features (true is enabled, false is disabled)</h2><h2 class="panel-title">When an entity is added to the collection, a default status is defined for behaviour analytic features, default to enabled: (click on the table below to edit the macro definition)</h2>
                <div class="panel-element-row">
                    <div id="elementTable_trackme_default_enable_behaviour_analytic" class="dashboard-element table" style="width: 100%">
                        <div class="panel-body"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div id="ManageRowMacro4c" class="dashboard-row dashboard-rowDataSourcesTable" >
        <div id="panelManage4c" class="dashboard-cell" style="width: 100%;">
            <div class="dashboard-panel clearfix">
                <h2 style="padding: 12px 55px 7px 12px;">trackme_default_outlier_threshold_multiplier: default value for outlier threshold multiplier</h2><h2 class="panel-title">Event count outliers detection for behaviour analytics uses the default threshold multiplier for outliers calculations: (click on the table below to edit the macro definition)</h2>
                <div class="panel-element-row">
                    <div id="elementTable_trackme_default_outlier_threshold_multiplier" class="dashboard-element table" style="width: 100%">
                        <div class="panel-body"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div id="ManageRowMacro4d" class="dashboard-row dashboard-rowDataSourcesTable" >
        <div id="panelManage4d" class="dashboard-cell" style="width: 100%;">
            <div class="dashboard-panel clearfix">
                <h2 style="padding: 12px 55px 7px 12px;">trackme_default_outlier_alert_on_upper: default behaviour for alerting on outliers increase (true is enabled, false is disabled)</h2><h2 class="panel-title">Enable or disable impacting the entity status on upper outliers detection: (click on the table below to edit the macro definition)</h2>
                <div class="panel-element-row">
                    <div id="elementTable_trackme_default_outlier_alert_on_upper" class="dashboard-element table" style="width: 100%">
                        <div class="panel-body"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div id="ManageRowMacro4e" class="dashboard-row dashboard-rowDataSourcesTable" >
        <div id="panelManage4e" class="dashboard-cell" style="width: 100%;">
            <div class="dashboard-panel clearfix">
                <h2 style="padding: 12px 55px 7px 12px;">trackme_default_outlier_period: default period in relative days for outliers detection calculations</h2><h2 class="panel-title">define the period which is by default taken in consideration during outliers calculations: (click on the table below to edit the macro definition)</h2>
                <div class="panel-element-row">
                    <div id="elementTable_trackme_default_outlier_period" class="dashboard-element table" style="width: 100%">
                        <div class="panel-body"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div id="rowManageMacrosDocGlobal" class="dashboard-row">
        <div id="panelManageMacrosDocGlobal" class="dashboard-cell" style="width: 100%;">
            <div class="dashboard-panel clearfix">
                <div class="panel-element-row">
                    <div id="elementManageMacrosDocGlobal" class="dashboard-element html" style="width: 100%">
                        <div class="panel-body html">
                            <div style="text-align: center; border: 3px dashed #ccc;">
                                <div style="display: inline-flex; align-items: center; margin-top: 5px;">
                                    <span style="font-size: 22px; font-weight: bold; color: #6495ed; margin-top: 5px;">GLOBAL IDENTITY CARD</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div id="ManageRowMacroDocGlobal1" class="dashboard-row dashboard-rowDataSourcesTable" >
        <div id="panelManageDocGlobal1" class="dashboard-cell" style="width: 100%;">
            <div class="dashboard-panel clearfix">
                <h2 style="padding: 12px 55px 7px 12px;">trackme_identity_card_default_url: global URL for identity cards</h2><h2 class="panel-title">define a value for the global identity card URL, if URL and note are defined, this associates by default all data sources with the default identity card but idenfity cards can still be created and associated: (click on the table below to edit the macro definition)</h2>
                <div class="panel-element-row">
                    <div id="elementTable_trackme_identity_card_default_url" class="dashboard-element table" style="width: 100%">
                        <div class="panel-body"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div id="ManageRowMacroDocGlobal2" class="dashboard-row dashboard-rowDataSourcesTable" >
        <div id="panelManageDocGlobal2" class="dashboard-cell" style="width: 100%;">
            <div class="dashboard-panel clearfix">
                <h2 style="padding: 12px 55px 7px 12px;">trackme_identity_card_default_note: global note for identity cards</h2><h2 class="panel-title">define a value for the global identity card note, if URL and note are defined, this associates by default all data sources with the default identity card but idenfity cards can still be created and associated: (click on the table below to edit the macro definition)</h2>
                <div class="panel-element-row">
                    <div id="elementTable_trackme_identity_card_default_note" class="dashboard-element table" style="width: 100%">
                        <div class="panel-body"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div id="rowManageMacrosInfoVarious" class="dashboard-row dashboard-rowManageResetInfo">
        <div id="panelManageMacrosInfoVarious" class="dashboard-cell" style="width: 100%;">
            <div class="dashboard-panel clearfix">
                <div class="panel-element-row">
                    <div id="elementManageMacrosInfoVarious" class="dashboard-element html" style="width: 100%">
                        <div class="panel-body html">
                            <div style="text-align: center; border: 3px dashed #ccc;">
                                <div style="display: inline-flex; align-items: center; margin-top: 5px;">
                                    <span style="font-size: 22px; font-weight: bold; color: #6495ed; margin-top: 5px;">OTHER MACROS DEFINITIONS</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div id="ManageRowMacro4" class="dashboard-row dashboard-rowDataSourcesTable" >
        <div id="panelManage4" class="dashboard-cell" style="width: 100%;">
            <div class="dashboard-panel clearfix">
                <h2 style="padding: 12px 55px 7px 12px;">trackme_date_format</h2><h2 class="panel-title">The UI generates human readable time stamps in the following format: (click on the table below to edit the macro definition)</h2>
                <div class="panel-element-row">
                    <div id="elementTable_trackme_date_format" class="dashboard-element table" style="width: 100%">
                        <div class="panel-body"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div id="ManageRowMacro5" class="dashboard-row dashboard-rowDataSourcesTable" >
        <div id="panelManage5" class="dashboard-cell" style="width: 100%;">
            <div class="dashboard-panel clearfix">
                <h2 style="padding: 12px 55px 7px 12px;">trackme_default_monitored_state</h2><h2 class="panel-title">Defines the default value for monitored_state when a data source is discovered: (click on the table below to edit the macro definition)</h2>
                <div class="panel-element-row">
                    <div id="elementTable_trackme_default_monitored_state" class="dashboard-element table" style="width: 100%">
                        <div class="panel-body"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div id="ManageRowMacro6" class="dashboard-row dashboard-rowDataSourcesTable" >
        <div id="panelManage6" class="dashboard-cell" style="width: 100%;">
            <div class="dashboard-panel clearfix">
                <h2 style="padding: 12px 55px 7px 12px;">trackme_default_host_monitored_state</h2><h2 class="panel-title">Defines the default value for monitored_state when a data host is discovered: (click on the table below to edit the macro definition)</h2>
                <div class="panel-element-row">
                    <div id="elementTable_trackme_default_host_monitored_state" class="dashboard-element table" style="width: 100%">
                        <div class="panel-body"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div id="ManageRowMacro7" class="dashboard-row dashboard-rowDataSourcesTable" >
        <div id="panelManage7" class="dashboard-cell" style="width: 100%;">
            <div class="dashboard-panel clearfix">
                <h2 style="padding: 12px 55px 7px 12px;">trackme_default_metric_host_monitored_state</h2><h2 class="panel-title">Defines the default value for monitored_state when a metric host is discovered: (click on the table below to edit the macro definition)</h2>
                <div class="panel-element-row">
                    <div id="elementTable_trackme_default_metric_host_monitored_state" class="dashboard-element table" style="width: 100%">
                        <div class="panel-body"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div id="ManageRowMacro8" class="dashboard-row dashboard-rowDataSourcesTable" >
        <div id="panelManage8" class="dashboard-cell" style="width: 100%;">
            <div class="dashboard-panel clearfix">
                <h2 style="padding: 12px 55px 7px 12px;">trackme_default_lag</h2><h2 class="panel-title">Defines the default value in seconds for the maximal lag latency for data sources: (click on the table below to edit the macro definition)</h2>
                <div class="panel-element-row">
                    <div id="elementTable_trackme_default_lag" class="dashboard-element table" style="width: 100%">
                        <div class="panel-body"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div id="ManageRowMacro9" class="dashboard-row dashboard-rowDataSourcesTable" >
        <div id="panelManage9" class="dashboard-cell" style="width: 100%;">
            <div class="dashboard-panel clearfix">
                <h2 style="padding: 12px 55px 7px 12px;">trackme_default_host_lag</h2><h2 class="panel-title">Defines the default value in seconds for the maximal lag latency for data hosts: (click on the table below to edit the macro definition)</h2>
                <div class="panel-element-row">
                    <div id="elementTable_trackme_default_host_lag" class="dashboard-element table" style="width: 100%">
                        <div class="panel-body"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div id="ManageRowMacro10" class="dashboard-row dashboard-rowDataSourcesTable" >
        <div id="panelManage10" class="dashboard-cell" style="width: 100%;">
            <div class="dashboard-panel clearfix">
                <h2 style="padding: 12px 55px 7px 12px;">trackme_default_metric_host_lag</h2><h2 class="panel-title">Defines the default value in seconds for the maximal lag latency for metric hosts: (click on the table below to edit the macro definition)</h2>
                <div class="panel-element-row">
                    <div id="elementTable_trackme_default_metric_host_lag" class="dashboard-element table" style="width: 100%">
                        <div class="panel-body"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div id="ManageRowMacro11" class="dashboard-row dashboard-rowDataSourcesTable" >
        <div id="panelManage11" class="dashboard-cell" style="width: 100%;">
            <div class="dashboard-panel clearfix">
                <h2 style="padding: 12px 55px 7px 12px;">trackme_audit_changes_retention</h2><h2 class="panel-title">Defines the retention to be used for entries stored in the audit collection: (click on the table below to edit the macro definition)</h2>
                <div class="panel-element-row">
                    <div id="elementTable_trackme_audit_changes_retention" class="dashboard-element table" style="width: 100%">
                        <div class="panel-body"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div id="ManageRowMacro13" class="dashboard-row dashboard-rowDataSourcesTable" >
        <div id="panelManage13" class="dashboard-cell" style="width: 100%;">
            <div class="dashboard-panel clearfix">
                <h2 style="padding: 12px 55px 7px 12px;">trackme_alerts_priority</h2><h2 class="panel-title">Macro definition for alerting priority, this macro is used by the application out of the box alerts to return SLA alerts based on the rules and the priority level: (click on the table below to edit the macro definition)</h2>
                <div class="panel-element-row">
                    <div id="elementTable_trackme_alerts_priority" class="dashboard-element table" style="width: 100%">
                        <div class="panel-body"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div id="ManageRowMacro14" class="dashboard-row dashboard-rowDataSourcesTable" >
        <div id="panelManage14" class="dashboard-cell" style="width: 100%;">
            <div class="dashboard-panel clearfix">
                <h2 style="padding: 12px 55px 7px 12px;">trackme_ack_default_duration</h2><h2 class="panel-title">Macro definition for acknowledgment, this macro defines the amount in seconds for maximal acknowledge duration, default to 1 day: (click on the table below to edit the macro definition)</h2>
                <div class="panel-element-row">
                    <div id="elementTable_trackme_ack_default_duration" class="dashboard-element table" style="width: 100%">
                        <div class="panel-body"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div id="ManageRowMacro15" class="dashboard-row dashboard-rowDataSourcesTable" >
        <div id="panelManage15" class="dashboard-cell" style="width: 100%;">
            <div class="dashboard-panel clearfix">
                <h2 style="padding: 12px 55px 7px 12px;">trackme_future_indexing_tolerance</h2><h2 class="panel-title">Macro definition for data indexed in the future detection tolerance, this macro defines the amount in negative seconds used for tolerance before we assume the data is indexed in the future: (click on the table below to edit the macro definition)</h2>
                <div class="panel-element-row">
                    <div id="elementTable_trackme_future_indexing_tolerance" class="dashboard-element table" style="width: 100%">
                        <div class="panel-body"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div id="ManageRowMacro16" class="dashboard-row dashboard-rowDataSourcesTable" >
        <div id="panelManage16" class="dashboard-cell" style="width: 100%;">
            <div class="dashboard-panel clearfix">
                <h2 style="padding: 12px 55px 7px 12px;">trackme_data_host_rule_filter</h2><h2 class="panel-title">Macro definition for data host naming filtering, this macro defines a regex based approach and length condition to filter out potential incorrectly defined hosts: (click on the table below to edit the macro definition)</h2>
                <div class="panel-element-row">
                    <div id="elementTable_trackme_data_host_rule_filter" class="dashboard-element table" style="width: 100%">
                        <div class="panel-body"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div id="ManageRowMacro17" class="dashboard-row dashboard-rowDataSourcesTable" >
        <div id="panelManage17" class="dashboard-cell" style="width: 100%;">
            <div class="dashboard-panel clearfix">
                <h2 style="padding: 12px 55px 7px 12px;">trackme_auto_disablement_period</h2><h2 class="panel-title">Macro definition for monitoring state auto disablement, this macro defines the number of days before a data source, data host or metric host gets automatically disabled if it has not actively sent data to Splunk:</h2>
                <div class="panel-element-row">
                    <div id="elementTable_trackme_auto_disablement_period" class="dashboard-element table" style="width: 100%">
                        <div class="panel-body"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>

</div>

</div>
</div>

<!--
END LAYOUT
-->

<script src="{{SPLUNKWEB_URL_PREFIX}}/config?autoload=1" crossorigin="use-credentials"></script>
<script src="{{SPLUNKWEB_URL_PREFIX}}/static/js/i18n.js"></script>
<script src="{{SPLUNKWEB_URL_PREFIX}}/i18ncatalog?autoload=1"></script>
<script src="{{SPLUNKWEB_URL_PREFIX}}/static/build/simplexml/index.js"></script>
<script type="text/javascript">
// <![CDATA[
// <![CDATA[
//
// LIBRARY REQUIREMENTS
//
// In the require function, we include the necessary libraries and modules for
// the HTML dashboard. Then, we pass variable names for these libraries and
// modules as function parameters, in order.
//
// When you add libraries or modules, remember to retain this mapping order
// between the library or module and its function parameter. You can do this by
// adding to the end of these lists, as shown in the commented examples below.
require([
        "splunkjs/mvc",
        "splunkjs/mvc/utils",
        "splunkjs/mvc/tokenutils",
        "underscore",
        "jquery",
        "splunkjs/mvc/simplexml",
        "splunkjs/mvc/layoutview",
        "splunkjs/mvc/simplexml/dashboardview",
        "splunkjs/mvc/simplexml/dashboard/panelref",
        "splunkjs/mvc/simplexml/element/chart",
        "splunkjs/mvc/simplexml/element/event",
        "splunkjs/mvc/simplexml/element/html",
        "splunkjs/mvc/simplexml/element/list",
        "splunkjs/mvc/simplexml/element/map",
        "splunkjs/mvc/simplexml/element/single",
        "splunkjs/mvc/simplexml/element/table",
        "splunkjs/mvc/simplexml/element/visualization",
        "splunkjs/mvc/simpleform/formutils",
        "splunkjs/mvc/simplexml/eventhandler",
        "splunkjs/mvc/simplexml/searcheventhandler",
        "splunkjs/mvc/simpleform/input/dropdown",
        "splunkjs/mvc/simpleform/input/radiogroup",
        "splunkjs/mvc/simpleform/input/linklist",
        "splunkjs/mvc/simpleform/input/multiselect",
        "splunkjs/mvc/simpleform/input/checkboxgroup",
        "splunkjs/mvc/simpleform/input/text",
        "splunkjs/mvc/simpleform/input/timerange",
        "splunkjs/mvc/simpleform/input/submit",
        "splunkjs/mvc/searchmanager",
        "splunkjs/mvc/savedsearchmanager",
        "splunkjs/mvc/postprocessmanager",
        "splunkjs/mvc/simplexml/urltokenmodel"
        // Add comma-separated libraries and modules manually here, for example:
        // ..."splunkjs/mvc/simplexml/urltokenmodel",
        // "splunkjs/mvc/tokenforwarder"
    ],
    function(
        mvc,
        utils,
        TokenUtils,
        _,
        $,
        DashboardController,
        LayoutView,
        Dashboard,
        PanelRef,
        ChartElement,
        EventElement,
        HtmlElement,
        ListElement,
        MapElement,
        SingleElement,
        TableElement,
        VisualizationElement,
        FormUtils,
        EventHandler,
        SearchEventHandler,
        DropdownInput,
        RadioGroupInput,
        LinkListInput,
        MultiSelectInput,
        CheckboxGroupInput,
        TextInput,
        TimeRangeInput,
        SubmitButton,
        SearchManager,
        SavedSearchManager,
        PostProcessManager,
        UrlTokenModel

        // Add comma-separated parameter names here, for example:
        // ...UrlTokenModel,
        // TokenForwarder
    ) {

        var pageLoading = true;

        //
        // FUNCTIONS
        //

        //
        // Notify
        //

        function notify(varCss, varPosition, varHtml, vardelay) {
            require([
            "jquery",
            "/static/app/trackme/notifybar/jquery.notifyBar.js",
            ], function ($) {
                //code here
                jQuery(function () {
                    jQuery.notifyBar({
                    cssClass: varCss,
                    position: varPosition,
                    html: varHtml,
                    delay: vardelay,
                    });
                });
            });
        }

        // Returns true if numeric
        function isNumeric(n) {
            return !isNaN(parseFloat(n)) && isFinite(n) && n > 0;
        }

        //
        // TOKENS
        //

        // Create token namespaces
        var urlTokenModel = new UrlTokenModel();
        mvc.Components.registerInstance('url', urlTokenModel);
        var defaultTokenModel = mvc.Components.getInstance('default', {
            create: true
        });
        var submittedTokenModel = mvc.Components.getInstance('submitted', {
            create: true
        });

        urlTokenModel.on('url:navigate', function() {
            defaultTokenModel.set(urlTokenModel.toJSON());
            if (!_.isEmpty(urlTokenModel.toJSON()) && !_.all(urlTokenModel.toJSON(), _.isUndefined)) {
                submitTokens();
            } else {
                submittedTokenModel.clear();
            }
        });

        // Initialize tokens
        defaultTokenModel.set(urlTokenModel.toJSON());

        function submitTokens() {
            // Copy the contents of the defaultTokenModel to the submittedTokenModel and urlTokenModel
            FormUtils.submitForm({
                replaceState: pageLoading
            });
        }

        function setToken(name, value) {
            defaultTokenModel.set(name, value);
            submittedTokenModel.set(name, value);
        }

        function unsetToken(name) {
            defaultTokenModel.unset(name);
            submittedTokenModel.unset(name);
        }

        //
        // VARIOUS
        //


        //
        // SEARCH MANAGERS
        //

        // manage and configure

        var searchGetMacrosDefinitions = new SearchManager({
            "id": "searchGetMacrosDefinitions",
            "earliest_time": "-15m",
            "cancelOnUnload": true,
            "sample_ratio": null,
            "refreshType": "delay",
            "latest_time": "now",
            "search": "| rest /servicesNS/nobody/trackme/admin/macros count=0 splunk_server=local | rename eai:appName as app | where app=\"trackme\" | table title definition",
            "status_buckets": 0,
            "app": utils.getCurrentApp(),
            "auto_cancel": 90,
            "preview": true,
            "runWhenTimeIsUndefined": false
        }, {
            tokens: true,
            tokenNamespace: "submitted"
        });

        var searchGetMacro_trackme_tstats = new PostProcessManager({
            "tokenDependencies": {},
            "search": "where title=\"trackme_tstats\" | eval alternative_definition=\"tstats include_reduced_buckets=t\" | table definition, alternative_definition",
            "managerid": "searchGetMacrosDefinitions",
            "id": "searchGetMacro_tstats"
        }, {
            tokens: true,
            tokenNamespace: "submitted"
        });

        var searchGetMacro_trackme_idx_filter = new PostProcessManager({
            "tokenDependencies": {},
            "search": "where title=\"trackme_idx_filter\" | table definition",
            "managerid": "searchGetMacrosDefinitions",
            "id": "searchGetMacro_trackme_idx_filter"
        }, {
            tokens: true,
            tokenNamespace: "submitted"
        });

        var searchGetMacro_trackme_identity_card_default_url = new PostProcessManager({
            "tokenDependencies": {},
            "search": "where title=\"trackme_identity_card_default_url\" | table definition",
            "managerid": "searchGetMacrosDefinitions",
            "id": "searchGetMacro_trackme_identity_card_default_url"
        }, {
            tokens: true,
            tokenNamespace: "submitted"
        });

        var searchGetMacro_trackme_identity_card_default_note = new PostProcessManager({
            "tokenDependencies": {},
            "search": "where title=\"trackme_identity_card_default_note\" | table definition",
            "managerid": "searchGetMacrosDefinitions",
            "id": "searchGetMacro_trackme_identity_card_default_note"
        }, {
            tokens: true,
            tokenNamespace: "submitted"
        });

        var searchGetMacro_trackme_idx_summary = new PostProcessManager({
            "tokenDependencies": {},
            "search": "where title=\"trackme_idx\" | table definition",
            "managerid": "searchGetMacrosDefinitions",
            "id": "searchGetMacro_trackme_idx_summary"
        }, {
            tokens: true,
            tokenNamespace: "submitted"
        });

        var searchGetMacro_trackme_metrics_idx = new PostProcessManager({
            "tokenDependencies": {},
            "search": "where title=\"trackme_metrics_idx\" | table definition",
            "managerid": "searchGetMacrosDefinitions",
            "id": "searchGetMacro_trackme_metrics_idx"
        }, {
            tokens: true,
            tokenNamespace: "submitted"
        });

        var searchGetMacro_trackme_default_outlier_threshold_multiplier = new PostProcessManager({
            "tokenDependencies": {},
            "search": "where title=\"trackme_default_outlier_threshold_multiplier\" | table definition",
            "managerid": "searchGetMacrosDefinitions",
            "id": "searchGetMacro_trackme_default_outlier_threshold_multiplier"
        }, {
            tokens: true,
            tokenNamespace: "submitted"
        });

        var searchGetMacro_trackme_default_outlier_period = new PostProcessManager({
            "tokenDependencies": {},
            "search": "where title=\"trackme_default_outlier_period\" | table definition",
            "managerid": "searchGetMacrosDefinitions",
            "id": "searchGetMacro_trackme_default_outlier_period"
        }, {
            tokens: true,
            tokenNamespace: "submitted"
        });

        var searchGetMacro_trackme_default_outlier_alert_on_upper = new PostProcessManager({
            "tokenDependencies": {},
            "search": "where title=\"trackme_default_outlier_alert_on_upper\" | table definition",
            "managerid": "searchGetMacrosDefinitions",
            "id": "searchGetMacro_trackme_default_outlier_alert_on_upper"
        }, {
            tokens: true,
            tokenNamespace: "submitted"
        });

        var searchGetMacro_trackme_default_enable_behaviour_analytic = new PostProcessManager({
            "tokenDependencies": {},
            "search": "where title=\"trackme_default_enable_behaviour_analytic\" | table definition",
            "managerid": "searchGetMacrosDefinitions",
            "id": "searchGetMacro_trackme_default_enable_behaviour_analytic"
        }, {
            tokens: true,
            tokenNamespace: "submitted"
        });

        var searchGetMacro_trackme_date_format = new PostProcessManager({
            "tokenDependencies": {},
            "search": "where title=\"trackme_date_format(1)\" | table definition",
            "managerid": "searchGetMacrosDefinitions",
            "id": "searchGetMacro_trackme_date_format"
        }, {
            tokens: true,
            tokenNamespace: "submitted"
        });

        var searchGetMacro_trackme_tstats_main_filter = new PostProcessManager({
            "tokenDependencies": {},
            "search": "where title=\"trackme_tstats_main_filter\" | table definition",
            "managerid": "searchGetMacrosDefinitions",
            "id": "searchGetMacro_trackme_tstats_main_filter"
        }, {
            tokens: true,
            tokenNamespace: "submitted"
        });

        var searchGetMacro_trackme_default_monitored_state = new PostProcessManager({
            "tokenDependencies": {},
            "search": "where title=\"trackme_default_monitored_state\" | table definition",
            "managerid": "searchGetMacrosDefinitions",
            "id": "searchGetMacro_trackme_default_monitored_state"
        }, {
            tokens: true,
            tokenNamespace: "submitted"
        });

        var searchGetMacro_trackme_default_host_monitored_state = new PostProcessManager({
            "tokenDependencies": {},
            "search": "where title=\"trackme_default_host_monitored_state\" | table definition",
            "managerid": "searchGetMacrosDefinitions",
            "id": "searchGetMacro_trackme_default_host_monitored_state"
        }, {
            tokens: true,
            tokenNamespace: "submitted"
        });

        var searchGetMacro_trackme_default_metric_host_monitored_state = new PostProcessManager({
            "tokenDependencies": {},
            "search": "where title=\"trackme_default_metric_host_monitored_state\" | table definition",
            "managerid": "searchGetMacrosDefinitions",
            "id": "searchGetMacro_trackme_default_metric_host_monitored_state"
        }, {
            tokens: true,
            tokenNamespace: "submitted"
        });

        var searchGetMacro_trackme_default_lag = new PostProcessManager({
            "tokenDependencies": {},
            "search": "where title=\"trackme_default_lag\" | table definition",
            "managerid": "searchGetMacrosDefinitions",
            "id": "searchGetMacro_trackme_default_lag"
        }, {
            tokens: true,
            tokenNamespace: "submitted"
        });

        var searchGetMacro_trackme_default_host_lag = new PostProcessManager({
            "tokenDependencies": {},
            "search": "where title=\"trackme_default_host_lag\" | table definition",
            "managerid": "searchGetMacrosDefinitions",
            "id": "searchGetMacro_trackme_default_host_lag"
        }, {
            tokens: true,
            tokenNamespace: "submitted"
        });

        var searchGetMacro_trackme_default_metric_host_lag = new PostProcessManager({
            "tokenDependencies": {},
            "search": "where title=\"trackme_default_metric_host_lag\" | table definition",
            "managerid": "searchGetMacrosDefinitions",
            "id": "searchGetMacro_trackme_default_metric_host_lag"
        }, {
            tokens: true,
            tokenNamespace: "submitted"
        });

        var searchGetMacro_trackme_audit_changes_retention = new PostProcessManager({
            "tokenDependencies": {},
            "search": "where title=\"trackme_audit_changes_retention\" | table definition",
            "managerid": "searchGetMacrosDefinitions",
            "id": "searchGetMacro_trackme_audit_changes_retention"
        }, {
            tokens: true,
            tokenNamespace: "submitted"
        });

        var searchGetMacro_trackme_alerts_priority = new PostProcessManager({
            "tokenDependencies": {},
            "search": "where title=\"trackme_alerts_priority\" | table definition",
            "managerid": "searchGetMacrosDefinitions",
            "id": "searchGetMacro_trackme_alerts_priority"
        }, {
            tokens: true,
            tokenNamespace: "submitted"
        });

        var searchGetMacro_trackme_ack_default_duration = new PostProcessManager({
            "tokenDependencies": {},
            "search": "where title=\"trackme_ack_default_duration\" | table definition",
            "managerid": "searchGetMacrosDefinitions",
            "id": "searchGetMacro_trackme_ack_default_duration"
        }, {
            tokens: true,
            tokenNamespace: "submitted"
        });

        var searchGetMacro_trackme_future_indexing_tolerance = new PostProcessManager({
            "tokenDependencies": {},
            "search": "where title=\"trackme_future_indexing_tolerance\" | table definition",
            "managerid": "searchGetMacrosDefinitions",
            "id": "searchGetMacro_trackme_future_indexing_tolerance"
        }, {
            tokens: true,
            tokenNamespace: "submitted"
        });

        var searchGetMacro_trackme_data_host_rule_filter = new PostProcessManager({
            "tokenDependencies": {},
            "search": "where title=\"trackme_data_host_rule_filter(1)\" | table definition",
            "managerid": "searchGetMacrosDefinitions",
            "id": "searchGetMacro_trackme_data_host_rule_filter"
        }, {
            tokens: true,
            tokenNamespace: "submitted"
        });

        var searchGetMacro_trackme_get_data_host_tags = new PostProcessManager({
            "tokenDependencies": {},
            "search": "where title=\"trackme_get_data_host_tags\" | eval alternative_definition_es=\"`get_asset(data_host)` | rename \\\"data_host_*\\\" as \\\"*\\\" | fields tags\", alternative_definition_cmdb=\"lookup name_of_lookup key_name_field as data_host | fields tags\" | table definition, alternative_definition_es, alternative_definition_cmdb",
            "managerid": "searchGetMacrosDefinitions",
            "id": "searchGetMacro_trackme_get_data_host_tags"
        }, {
            tokens: true,
            tokenNamespace: "submitted"
        });

        var searchGetMacro_trackme_data_sampling_max_allowed_runtime_sec = new PostProcessManager({
            "tokenDependencies": {},
            "search": "where title=\"trackme_data_sampling_max_allowed_runtime_sec\" | table definition",
            "managerid": "searchGetMacrosDefinitions",
            "id": "searchGetMacro_trackme_data_sampling_max_allowed_runtime_sec"
        }, {
            tokens: true,
            tokenNamespace: "submitted"
        });

        var searchGetMacro_trackme_data_sampling_default_sample_record_at_discovery = new PostProcessManager({
            "tokenDependencies": {},
            "search": "where title=\"trackme_data_sampling_default_sample_record_at_discovery\" | table definition",
            "managerid": "searchGetMacrosDefinitions",
            "id": "searchGetMacro_trackme_data_sampling_default_sample_record_at_discovery"
        }, {
            tokens: true,
            tokenNamespace: "submitted"
        });

        var searchGetMacro_trackme_data_sampling_default_sample_record_at_run = new PostProcessManager({
            "tokenDependencies": {},
            "search": "where title=\"trackme_data_sampling_default_sample_record_at_run\" | table definition",
            "managerid": "searchGetMacrosDefinitions",
            "id": "searchGetMacro_trackme_data_sampling_default_sample_record_at_run"
        }, {
            tokens: true,
            tokenNamespace: "submitted"
        });

        var searchGetMacro_trackme_get_metric_host_tags = new PostProcessManager({
            "tokenDependencies": {},
            "search": "where title=\"trackme_get_metric_host_tags\" | eval alternative_definition_es=\"`get_asset(metric_host)` | rename \\\"metric_host_*\\\" as \\\"*\\\" | fields tags\", alternative_definition_cmdb=\"lookup name_of_lookup key_name_field as metric_host | fields tags\" | table definition, alternative_definition_es, alternative_definition_cmdb",
            "managerid": "searchGetMacrosDefinitions",
            "id": "searchGetMacro_trackme_get_metric_host_tags"
        }, {
            tokens: true,
            tokenNamespace: "submitted"
        });

        var searchGetMacro_trackme_auto_disablement_period = new PostProcessManager({
            "tokenDependencies": {},
            "search": "where title=\"trackme_auto_disablement_period\" | table definition",
            "managerid": "searchGetMacrosDefinitions",
            "id": "searchGetMacro_trackme_auto_disablement_period"
        }, {
            tokens: true,
            tokenNamespace: "submitted"
        });

        //
        // SPLUNK LAYOUT
        //

        $('header').remove();
        new LayoutView({
                "hideChrome": false,
                "hideAppBar": false,
                "hideSplunkBar": false,
                "hideFooter": false
            })
            .render()
            .getContainerElement()
            .appendChild($('.dashboard-body')[0]);

        //
        // DASHBOARD EDITOR
        //

        new Dashboard({
            id: 'dashboard',
            el: $('.dashboard-body'),
            showTitle: true,
            editable: false
        }, {
            tokens: true
        }).render();


        //
        // VIEWS: VISUALIZATION ELEMENTS
        //

        // Manage html dynamic panels

        //
        // VIEWS: FORM INPUTS
        //

        function defineRootUri() {
            var rootUri;
            var splunkVersion = $C.VERSION_LABEL.replace(".", "")
            splunkVersion = splunkVersion.substring(0, 2);
                if (Number(splunkVersion) >= '82') {
                    var rootUri = '/en-GB/manager/trackme/data/macros/';
                } else {
                    var rootUri = '/en-GB/manager/trackme/admin/macros/';
                }
                return rootUri;
        }

        // manage and configure

        var elementTable_tstats = new TableElement({
            "id": "elementTable_tstats",
            "count": 100,
            "drilldown": "row",
            "refresh.display": "none",
            "wrap": "false",
            "managerid": "searchGetMacro_tstats",
            "el": $('#elementTable_tstats')
        }, {
            tokens: true,
            tokenNamespace: "submitted"
        }).render();

        elementTable_tstats.on("click", function(e) {
            if (e.field !== undefined) {
                e.preventDefault();
                rootUri = defineRootUri();
                var url = TokenUtils.replaceTokenNames(rootUri + "trackme_tstats?action=edit", _.extend(submittedTokenModel.toJSON(), e.data), TokenUtils.getEscaper('url'), TokenUtils.getFilters(mvc.Components));
                utils.redirect(url, false, "_blank");
            }
        });

        var elementTable_trackme_idx_filter = new TableElement({
            "id": "elementTable_trackme_idx_filter",
            "count": 100,
            "drilldown": "row",
            "refresh.display": "none",
            "wrap": "false",
            "managerid": "searchGetMacro_trackme_idx_filter",
            "el": $('#elementTable_trackme_idx_filter')
        }, {
            tokens: true,
            tokenNamespace: "submitted"
        }).render();

        elementTable_trackme_idx_filter.on("click", function(e) {
            if (e.field !== undefined) {
                e.preventDefault();
                rootUri = defineRootUri();
                var url = TokenUtils.replaceTokenNames(rootUri + "trackme_idx_filter?action=edit", _.extend(submittedTokenModel.toJSON(), e.data), TokenUtils.getEscaper('url'), TokenUtils.getFilters(mvc.Components));
                utils.redirect(url, false, "_blank");
            }
        });

        var elementTable_trackme_idx_summary = new TableElement({
            "id": "elementTable_trackme_idx_summary",
            "count": 100,
            "drilldown": "row",
            "refresh.display": "none",
            "wrap": "false",
            "managerid": "searchGetMacro_trackme_idx_summary",
            "el": $('#elementTable_trackme_idx_summary')
        }, {
            tokens: true,
            tokenNamespace: "submitted"
        }).render();

        elementTable_trackme_idx_summary.on("click", function(e) {
            if (e.field !== undefined) {
                e.preventDefault();
                rootUri = defineRootUri();
                var url = TokenUtils.replaceTokenNames(rootUri + "trackme_idx?action=edit", _.extend(submittedTokenModel.toJSON(), e.data), TokenUtils.getEscaper('url'), TokenUtils.getFilters(mvc.Components));
                utils.redirect(url, false, "_blank");
            }
        });

        var elementTable_trackme_metrics_idx = new TableElement({
            "id": "elementTable_trackme_metrics_idx",
            "count": 100,
            "drilldown": "row",
            "refresh.display": "none",
            "wrap": "false",
            "managerid": "searchGetMacro_trackme_metrics_idx",
            "el": $('#elementTable_trackme_metrics_idx')
        }, {
            tokens: true,
            tokenNamespace: "submitted"
        }).render();

        elementTable_trackme_metrics_idx.on("click", function(e) {
            if (e.field !== undefined) {
                e.preventDefault();
                rootUri = defineRootUri();
                var url = TokenUtils.replaceTokenNames(rootUri + "trackme_metrics_idx?action=edit", _.extend(submittedTokenModel.toJSON(), e.data), TokenUtils.getEscaper('url'), TokenUtils.getFilters(mvc.Components));
                utils.redirect(url, false, "_blank");
            }
        });

        var elementTable_trackme_default_outlier_threshold_multiplier = new TableElement({
            "id": "elementTable_trackme_default_outlier_threshold_multiplier",
            "count": 100,
            "drilldown": "row",
            "refresh.display": "none",
            "wrap": "false",
            "managerid": "searchGetMacro_trackme_default_outlier_threshold_multiplier",
            "el": $('#elementTable_trackme_default_outlier_threshold_multiplier')
        }, {
            tokens: true,
            tokenNamespace: "submitted"
        }).render();

        elementTable_trackme_default_outlier_threshold_multiplier.on("click", function(e) {
            if (e.field !== undefined) {
                e.preventDefault();
                rootUri = defineRootUri();
                var url = TokenUtils.replaceTokenNames(rootUri + "trackme_default_outlier_threshold_multiplier?action=edit", _.extend(submittedTokenModel.toJSON(), e.data), TokenUtils.getEscaper('url'), TokenUtils.getFilters(mvc.Components));
                utils.redirect(url, false, "_blank");
            }
        });

        var elementTable_trackme_default_outlier_period = new TableElement({
            "id": "elementTable_trackme_default_outlier_period",
            "count": 100,
            "drilldown": "row",
            "refresh.display": "none",
            "wrap": "false",
            "managerid": "searchGetMacro_trackme_default_outlier_period",
            "el": $('#elementTable_trackme_default_outlier_period')
        }, {
            tokens: true,
            tokenNamespace: "submitted"
        }).render();

        elementTable_trackme_default_outlier_period.on("click", function(e) {
            if (e.field !== undefined) {
                e.preventDefault();
                rootUri = defineRootUri();
                var url = TokenUtils.replaceTokenNames(rootUri + "trackme_default_outlier_period?action=edit", _.extend(submittedTokenModel.toJSON(), e.data), TokenUtils.getEscaper('url'), TokenUtils.getFilters(mvc.Components));
                utils.redirect(url, false, "_blank");
            }
        });

        var elementTable_trackme_default_outlier_alert_on_upper = new TableElement({
            "id": "elementTable_trackme_default_outlier_alert_on_upper",
            "count": 100,
            "drilldown": "row",
            "refresh.display": "none",
            "wrap": "false",
            "managerid": "searchGetMacro_trackme_default_outlier_alert_on_upper",
            "el": $('#elementTable_trackme_default_outlier_alert_on_upper')
        }, {
            tokens: true,
            tokenNamespace: "submitted"
        }).render();

        elementTable_trackme_default_outlier_alert_on_upper.on("click", function(e) {
            if (e.field !== undefined) {
                e.preventDefault();
                rootUri = defineRootUri();
                var url = TokenUtils.replaceTokenNames(rootUri + "trackme_default_outlier_alert_on_upper?action=edit", _.extend(submittedTokenModel.toJSON(), e.data), TokenUtils.getEscaper('url'), TokenUtils.getFilters(mvc.Components));
                utils.redirect(url, false, "_blank");
            }
        });

        var elementTable_trackme_default_enable_behaviour_analytic = new TableElement({
            "id": "elementTable_trackme_default_enable_behaviour_analytic",
            "count": 100,
            "drilldown": "row",
            "refresh.display": "none",
            "wrap": "false",
            "managerid": "searchGetMacro_trackme_default_enable_behaviour_analytic",
            "el": $('#elementTable_trackme_default_enable_behaviour_analytic')
        }, {
            tokens: true,
            tokenNamespace: "submitted"
        }).render();

        elementTable_trackme_default_enable_behaviour_analytic.on("click", function(e) {
            if (e.field !== undefined) {
                e.preventDefault();
                rootUri = defineRootUri();
                var url = TokenUtils.replaceTokenNames(rootUri + "trackme_default_enable_behaviour_analytic?action=edit", _.extend(submittedTokenModel.toJSON(), e.data), TokenUtils.getEscaper('url'), TokenUtils.getFilters(mvc.Components));
                utils.redirect(url, false, "_blank");
            }
        });

        var elementTable_trackme_identity_card_default_url = new TableElement({
            "id": "elementTable_trackme_identity_card_default_url",
            "count": 100,
            "drilldown": "row",
            "refresh.display": "none",
            "wrap": "false",
            "managerid": "searchGetMacro_trackme_identity_card_default_url",
            "el": $('#elementTable_trackme_identity_card_default_url')
        }, {
            tokens: true,
            tokenNamespace: "submitted"
        }).render();

        elementTable_trackme_identity_card_default_url.on("click", function(e) {
            if (e.field !== undefined) {
                e.preventDefault();
                rootUri = defineRootUri();
                var url = TokenUtils.replaceTokenNames(rootUri + "trackme_identity_card_default_url?action=edit", _.extend(submittedTokenModel.toJSON(), e.data), TokenUtils.getEscaper('url'), TokenUtils.getFilters(mvc.Components));
                utils.redirect(url, false, "_blank");
            }
        });

        var elementTable_trackme_identity_card_default_note = new TableElement({
            "id": "elementTable_trackme_identity_card_default_note",
            "count": 100,
            "drilldown": "row",
            "refresh.display": "none",
            "wrap": "false",
            "managerid": "searchGetMacro_trackme_identity_card_default_note",
            "el": $('#elementTable_trackme_identity_card_default_note')
        }, {
            tokens: true,
            tokenNamespace: "submitted"
        }).render();

        elementTable_trackme_identity_card_default_note.on("click", function(e) {
            if (e.field !== undefined) {
                e.preventDefault();
                rootUri = defineRootUri();
                var url = TokenUtils.replaceTokenNames(rootUri + "trackme_identity_card_default_note?action=edit", _.extend(submittedTokenModel.toJSON(), e.data), TokenUtils.getEscaper('url'), TokenUtils.getFilters(mvc.Components));
                utils.redirect(url, false, "_blank");
            }
        });

        var elementTable_trackme_tstats_main_filter = new TableElement({
            "id": "elementTable_trackme_tstats_main_filter",
            "count": 100,
            "drilldown": "row",
            "refresh.display": "none",
            "wrap": "false",
            "managerid": "searchGetMacro_trackme_tstats_main_filter",
            "el": $('#elementTable_trackme_tstats_main_filter')
        }, {
            tokens: true,
            tokenNamespace: "submitted"
        }).render();

        elementTable_trackme_tstats_main_filter.on("click", function(e) {
            if (e.field !== undefined) {
                e.preventDefault();
                rootUri = defineRootUri();
                var url = TokenUtils.replaceTokenNames(rootUri + "trackme_tstats_main_filter?action=edit", _.extend(submittedTokenModel.toJSON(), e.data), TokenUtils.getEscaper('url'), TokenUtils.getFilters(mvc.Components));
                utils.redirect(url, false, "_blank");
            }
        });

        var elementTable_trackme_alerts_priority = new TableElement({
            "id": "elementTable_trackme_alerts_priority",
            "count": 100,
            "drilldown": "row",
            "refresh.display": "none",
            "wrap": "false",
            "managerid": "searchGetMacro_trackme_alerts_priority",
            "el": $('#elementTable_trackme_alerts_priority')
        }, {
            tokens: true,
            tokenNamespace: "submitted"
        }).render();

        elementTable_trackme_alerts_priority.on("click", function(e) {
            if (e.field !== undefined) {
                e.preventDefault();
                rootUri = defineRootUri();
                var url = TokenUtils.replaceTokenNames(rootUri + "trackme_alerts_priority?action=edit", _.extend(submittedTokenModel.toJSON(), e.data), TokenUtils.getEscaper('url'), TokenUtils.getFilters(mvc.Components));
                utils.redirect(url, false, "_blank");
            }
        });

        var elementTable_trackme_default_monitored_state = new TableElement({
            "id": "elementTable_trackme_default_monitored_state",
            "count": 100,
            "drilldown": "row",
            "refresh.display": "none",
            "wrap": "false",
            "managerid": "searchGetMacro_trackme_default_monitored_state",
            "el": $('#elementTable_trackme_default_monitored_state')
        }, {
            tokens: true,
            tokenNamespace: "submitted"
        }).render();

        elementTable_trackme_default_monitored_state.on("click", function(e) {
            if (e.field !== undefined) {
                e.preventDefault();
                rootUri = defineRootUri();
                var url = TokenUtils.replaceTokenNames(rootUri + "trackme_default_monitored_state?action=edit", _.extend(submittedTokenModel.toJSON(), e.data), TokenUtils.getEscaper('url'), TokenUtils.getFilters(mvc.Components));
                utils.redirect(url, false, "_blank");
            }
        });

        var elementTable_trackme_default_host_monitored_state = new TableElement({
            "id": "elementTable_trackme_default_host_monitored_state",
            "count": 100,
            "drilldown": "row",
            "refresh.display": "none",
            "wrap": "false",
            "managerid": "searchGetMacro_trackme_default_host_monitored_state",
            "el": $('#elementTable_trackme_default_host_monitored_state')
        }, {
            tokens: true,
            tokenNamespace: "submitted"
        }).render();

        elementTable_trackme_default_host_monitored_state.on("click", function(e) {
            if (e.field !== undefined) {
                e.preventDefault();
                rootUri = defineRootUri();
                var url = TokenUtils.replaceTokenNames(rootUri + "trackme_default_host_monitored_state?action=edit", _.extend(submittedTokenModel.toJSON(), e.data), TokenUtils.getEscaper('url'), TokenUtils.getFilters(mvc.Components));
                utils.redirect(url, false, "_blank");
            }
        });

        var elementTable_trackme_default_metric_host_monitored_state = new TableElement({
            "id": "elementTable_trackme_default_metric_host_monitored_state",
            "count": 100,
            "drilldown": "row",
            "refresh.display": "none",
            "wrap": "false",
            "managerid": "searchGetMacro_trackme_default_metric_host_monitored_state",
            "el": $('#elementTable_trackme_default_metric_host_monitored_state')
        }, {
            tokens: true,
            tokenNamespace: "submitted"
        }).render();

        elementTable_trackme_default_metric_host_monitored_state.on("click", function(e) {
            if (e.field !== undefined) {
                e.preventDefault();
                rootUri = defineRootUri();
                var url = TokenUtils.replaceTokenNames(rootUri + "trackme_default_metric_host_monitored_state?action=edit", _.extend(submittedTokenModel.toJSON(), e.data), TokenUtils.getEscaper('url'), TokenUtils.getFilters(mvc.Components));
                utils.redirect(url, false, "_blank");
            }
        });

        var elementTable_trackme_default_lag = new TableElement({
            "id": "elementTable_trackme_default_lag",
            "count": 100,
            "drilldown": "row",
            "refresh.display": "none",
            "wrap": "false",
            "managerid": "searchGetMacro_trackme_default_lag",
            "el": $('#elementTable_trackme_default_lag')
        }, {
            tokens: true,
            tokenNamespace: "submitted"
        }).render();

        elementTable_trackme_default_lag.on("click", function(e) {
            if (e.field !== undefined) {
                e.preventDefault();
                rootUri = defineRootUri();
                var url = TokenUtils.replaceTokenNames(rootUri + "trackme_default_lag?action=edit", _.extend(submittedTokenModel.toJSON(), e.data), TokenUtils.getEscaper('url'), TokenUtils.getFilters(mvc.Components));
                utils.redirect(url, false, "_blank");
            }
        });

        var elementTable_trackme_default_host_lag = new TableElement({
            "id": "elementTable_trackme_default_host_lag",
            "count": 100,
            "drilldown": "row",
            "refresh.display": "none",
            "wrap": "false",
            "managerid": "searchGetMacro_trackme_default_host_lag",
            "el": $('#elementTable_trackme_default_host_lag')
        }, {
            tokens: true,
            tokenNamespace: "submitted"
        }).render();

        elementTable_trackme_default_host_lag.on("click", function(e) {
            if (e.field !== undefined) {
                e.preventDefault();
                rootUri = defineRootUri();
                var url = TokenUtils.replaceTokenNames(rootUri + "trackme_default_host_lag?action=edit", _.extend(submittedTokenModel.toJSON(), e.data), TokenUtils.getEscaper('url'), TokenUtils.getFilters(mvc.Components));
                utils.redirect(url, false, "_blank");
            }
        });

        var elementTable_trackme_default_metric_host_lag = new TableElement({
            "id": "elementTable_trackme_default_metric_host_lag",
            "count": 100,
            "drilldown": "row",
            "refresh.display": "none",
            "wrap": "false",
            "managerid": "searchGetMacro_trackme_default_metric_host_lag",
            "el": $('#elementTable_trackme_default_metric_host_lag')
        }, {
            tokens: true,
            tokenNamespace: "submitted"
        }).render();

        elementTable_trackme_default_metric_host_lag.on("click", function(e) {
            if (e.field !== undefined) {
                e.preventDefault();
                rootUri = defineRootUri();
                var url = TokenUtils.replaceTokenNames(rootUri + "trackme_default_metric_host_lag?action=edit", _.extend(submittedTokenModel.toJSON(), e.data), TokenUtils.getEscaper('url'), TokenUtils.getFilters(mvc.Components));
                utils.redirect(url, false, "_blank");
            }
        });

        var elementTable_trackme_audit_changes_retention = new TableElement({
            "id": "elementTable_trackme_audit_changes_retention",
            "count": 100,
            "drilldown": "row",
            "refresh.display": "none",
            "wrap": "false",
            "managerid": "searchGetMacro_trackme_audit_changes_retention",
            "el": $('#elementTable_trackme_audit_changes_retention')
        }, {
            tokens: true,
            tokenNamespace: "submitted"
        }).render();

        elementTable_trackme_audit_changes_retention.on("click", function(e) {
            if (e.field !== undefined) {
                e.preventDefault();
                rootUri = defineRootUri();
                var url = TokenUtils.replaceTokenNames(rootUri + "trackme_audit_changes_retention?action=edit", _.extend(submittedTokenModel.toJSON(), e.data), TokenUtils.getEscaper('url'), TokenUtils.getFilters(mvc.Components));
                utils.redirect(url, false, "_blank");
            }
        });

        var elementTable_trackme_ack_default_duration = new TableElement({
            "id": "elementTable_trackme_ack_default_duration",
            "count": 100,
            "drilldown": "row",
            "refresh.display": "none",
            "wrap": "false",
            "managerid": "searchGetMacro_trackme_ack_default_duration",
            "el": $('#elementTable_trackme_ack_default_duration')
        }, {
            tokens: true,
            tokenNamespace: "submitted"
        }).render();

        elementTable_trackme_ack_default_duration.on("click", function(e) {
            if (e.field !== undefined) {
                e.preventDefault();
                rootUri = defineRootUri();
                var url = TokenUtils.replaceTokenNames(rootUri + "trackme_ack_default_duration?action=edit", _.extend(submittedTokenModel.toJSON(), e.data), TokenUtils.getEscaper('url'), TokenUtils.getFilters(mvc.Components));
                utils.redirect(url, false, "_blank");
            }
        });

        var elementTable_trackme_future_indexing_tolerance = new TableElement({
            "id": "elementTable_trackme_future_indexing_tolerance",
            "count": 100,
            "drilldown": "row",
            "refresh.display": "none",
            "wrap": "false",
            "managerid": "searchGetMacro_trackme_future_indexing_tolerance",
            "el": $('#elementTable_trackme_future_indexing_tolerance')
        }, {
            tokens: true,
            tokenNamespace: "submitted"
        }).render();

        elementTable_trackme_future_indexing_tolerance.on("click", function(e) {
            if (e.field !== undefined) {
                e.preventDefault();
                rootUri = defineRootUri();
                var url = TokenUtils.replaceTokenNames(rootUri + "trackme_future_indexing_tolerance?action=edit", _.extend(submittedTokenModel.toJSON(), e.data), TokenUtils.getEscaper('url'), TokenUtils.getFilters(mvc.Components));
                utils.redirect(url, false, "_blank");
            }
        });

        var elementTable_trackme_data_host_rule_filter = new TableElement({
            "id": "elementTable_trackme_data_host_rule_filter",
            "count": 100,
            "drilldown": "row",
            "refresh.display": "none",
            "wrap": "false",
            "managerid": "searchGetMacro_trackme_data_host_rule_filter",
            "el": $('#elementTable_trackme_data_host_rule_filter')
        }, {
            tokens: true,
            tokenNamespace: "submitted"
        }).render();

        elementTable_trackme_data_host_rule_filter.on("click", function(e) {
            if (e.field !== undefined) {
                e.preventDefault();
                rootUri = defineRootUri();
                var url = TokenUtils.replaceTokenNames(rootUri + "trackme_data_host_rule_filter(1)?action=edit", _.extend(submittedTokenModel.toJSON(), e.data), TokenUtils.getEscaper('url'), TokenUtils.getFilters(mvc.Components));
                utils.redirect(url, false, "_blank");
            }
        });

        var elementTable_trackme_get_data_host_tags = new TableElement({
            "id": "elementTable_trackme_get_data_host_tags",
            "count": 100,
            "drilldown": "row",
            "refresh.display": "none",
            "wrap": "false",
            "managerid": "searchGetMacro_trackme_get_data_host_tags",
            "el": $('#elementTable_trackme_get_data_host_tags')
        }, {
            tokens: true,
            tokenNamespace: "submitted"
        }).render();

        elementTable_trackme_get_data_host_tags.on("click", function(e) {
            if (e.field !== undefined) {
                e.preventDefault();
                rootUri = defineRootUri();
                var url = TokenUtils.replaceTokenNames(rootUri + "trackme_get_data_host_tags?action=edit", _.extend(submittedTokenModel.toJSON(), e.data), TokenUtils.getEscaper('url'), TokenUtils.getFilters(mvc.Components));
                utils.redirect(url, false, "_blank");
            }
        });

        var elementTable_trackme_data_sampling_max_allowed_runtime_sec = new TableElement({
            "id": "elementTable_trackme_data_sampling_max_allowed_runtime_sec",
            "count": 100,
            "drilldown": "row",
            "refresh.display": "none",
            "wrap": "false",
            "managerid": "searchGetMacro_trackme_data_sampling_max_allowed_runtime_sec",
            "el": $('#elementTable_trackme_data_sampling_max_allowed_runtime_sec')
        }, {
            tokens: true,
            tokenNamespace: "submitted"
        }).render();

        elementTable_trackme_data_sampling_max_allowed_runtime_sec.on("click", function(e) {
            if (e.field !== undefined) {
                e.preventDefault();
                rootUri = defineRootUri();
                var url = TokenUtils.replaceTokenNames(rootUri + "trackme_data_sampling_max_allowed_runtime_sec?action=edit", _.extend(submittedTokenModel.toJSON(), e.data), TokenUtils.getEscaper('url'), TokenUtils.getFilters(mvc.Components));
                utils.redirect(url, false, "_blank");
            }
        });

        var elementTable_trackme_data_sampling_default_sample_record_at_discovery = new TableElement({
            "id": "elementTable_trackme_data_sampling_default_sample_record_at_discovery",
            "count": 100,
            "drilldown": "row",
            "refresh.display": "none",
            "wrap": "false",
            "managerid": "searchGetMacro_trackme_data_sampling_default_sample_record_at_discovery",
            "el": $('#elementTable_trackme_data_sampling_default_sample_record_at_discovery')
        }, {
            tokens: true,
            tokenNamespace: "submitted"
        }).render();

        elementTable_trackme_data_sampling_default_sample_record_at_discovery.on("click", function(e) {
            if (e.field !== undefined) {
                e.preventDefault();
                rootUri = defineRootUri();
                var url = TokenUtils.replaceTokenNames(rootUri + "trackme_data_sampling_default_sample_record_at_discovery?action=edit", _.extend(submittedTokenModel.toJSON(), e.data), TokenUtils.getEscaper('url'), TokenUtils.getFilters(mvc.Components));
                utils.redirect(url, false, "_blank");
            }
        });

        var elementTable_trackme_data_sampling_default_sample_record_at_run = new TableElement({
            "id": "elementTable_trackme_data_sampling_default_sample_record_at_run",
            "count": 100,
            "drilldown": "row",
            "refresh.display": "none",
            "wrap": "false",
            "managerid": "searchGetMacro_trackme_data_sampling_default_sample_record_at_run",
            "el": $('#elementTable_trackme_data_sampling_default_sample_record_at_run')
        }, {
            tokens: true,
            tokenNamespace: "submitted"
        }).render();

        elementTable_trackme_data_sampling_default_sample_record_at_run.on("click", function(e) {
            if (e.field !== undefined) {
                e.preventDefault();
                rootUri = defineRootUri();
                var url = TokenUtils.replaceTokenNames(rootUri + "trackme_data_sampling_default_sample_record_at_run?action=edit", _.extend(submittedTokenModel.toJSON(), e.data), TokenUtils.getEscaper('url'), TokenUtils.getFilters(mvc.Components));
                utils.redirect(url, false, "_blank");
            }
        });

        var elementTable_trackme_get_metric_host_tags = new TableElement({
            "id": "elementTable_trackme_get_metric_host_tags",
            "count": 100,
            "drilldown": "row",
            "refresh.display": "none",
            "wrap": "false",
            "managerid": "searchGetMacro_trackme_get_metric_host_tags",
            "el": $('#elementTable_trackme_get_metric_host_tags')
        }, {
            tokens: true,
            tokenNamespace: "submitted"
        }).render();

        elementTable_trackme_get_metric_host_tags.on("click", function(e) {
            if (e.field !== undefined) {
                e.preventDefault();
                rootUri = defineRootUri();
                var url = TokenUtils.replaceTokenNames(rootUri + "trackme_get_metric_host_tags?action=edit", _.extend(submittedTokenModel.toJSON(), e.data), TokenUtils.getEscaper('url'), TokenUtils.getFilters(mvc.Components));
                utils.redirect(url, false, "_blank");
            }
        });

        var elementTable_trackme_auto_disablement_period = new TableElement({
            "id": "elementTable_trackme_auto_disablement_period",
            "count": 100,
            "drilldown": "row",
            "refresh.display": "none",
            "wrap": "false",
            "managerid": "searchGetMacro_trackme_auto_disablement_period",
            "el": $('#elementTable_trackme_auto_disablement_period')
        }, {
            tokens: true,
            tokenNamespace: "submitted"
        }).render();

        elementTable_trackme_auto_disablement_period.on("click", function(e) {
            if (e.field !== undefined) {
                e.preventDefault();
                rootUri = defineRootUri();
                var url = TokenUtils.replaceTokenNames(rootUri + "trackme_auto_disablement_period?action=edit", _.extend(submittedTokenModel.toJSON(), e.data), TokenUtils.getEscaper('url'), TokenUtils.getFilters(mvc.Components));
                utils.redirect(url, false, "_blank");
            }
        });

        //
        // SERVICE OBJECT
        //

        // Create a service object using the Splunk SDK for JavaScript
        // to send REST requests
        var service = mvc.createService({
            owner: "nobody"
        });

        //
        // BEGIN OPERATIONS
        //

        // Audit changes
        var tokens = mvc.Components.get("default");
        var currentUser = Splunk.util.getConfigValue("USERNAME");
        tokens.set("currentUser", currentUser);
        var auditendpoint_URl = "/en-US/splunkd/__raw/servicesNS/nobody/trackme/storage/collections/data/kv_trackme_audit_changes/"

        // Audit record
        function auditRecord(action, change_type, object, object_category, object_attrs, result, comment) {

            // Audit changes
            var tokens = mvc.Components.get("default");
            var currentUser = Splunk.util.getConfigValue("USERNAME");
            tokens.set("currentUser", currentUser);
            var auditendpoint_URl = "/en-US/splunkd/__raw/servicesNS/nobody/trackme/storage/collections/data/kv_trackme_audit_changes/"

            var time = (new Date).getTime();
            var audit_record = {
                "time": time,
                "action": action,
                "user": currentUser,
                "change_type": change_type,
                "object": object,
                "object_category": object_category,
                "object_attrs": object_attrs,
                "result": result,
                "comment": comment
            };
            $.ajax({
                url: auditendpoint_URl,
                type: "POST",
                async: true,
                contentType: "application/json",
                data: JSON.stringify(audit_record),
                success: function(returneddata) {
                    // Run the search again to update the table
                }
            });

        }

        //
        // BEHAVIOUR ANALYTIC MODE
        //

        function update_behaviour_analytic(value) {

            var query_url = "/en-US/splunkd/__raw/servicesNS/nobody/trackme/configs/conf-macros/trackme_system_enable_behaviour_analytic_mode"
            var value = value;

            if (value == "enabled") {
                change_type = "enable behaviour analytic production mode";
            } else if (value == "training") {
                change_type = "enable behaviour analytic training mode";
            } else if (value == "disabled") {
                change_type = "disabled behaviour analytic training mode";
            }
            else {
                change_type = "unknown";
            }

            $.ajax({
                url: query_url,
                type: "POST",
                async: true,
                contentType: "application/json",
                data: "definition=\"" + value + "\"",
                success: function(returneddata) {

                    // Update the buttons
                    if (value == "enabled") {
                        document.getElementById('btn_enable_production_mode_confirm').disabled = true;
                        document.getElementById('btn_enable_training_mode_confirm').disabled = false;
                        document.getElementById('btn_disabled_mode_confirm').disabled = false;
                    }
                    else if (value == "training") {
                        document.getElementById('btn_enable_production_mode_confirm').disabled = false;
                        document.getElementById('btn_enable_training_mode_confirm').disabled = true;
                        document.getElementById('btn_disabled_mode_confirm').disabled = false;
                    }
                    else if (value == "disabled") {
                        document.getElementById('btn_enable_production_mode_confirm').disabled = false;
                        document.getElementById('btn_enable_training_mode_confirm').disabled = false;
                        document.getElementById('btn_disabled_mode_confirm').disabled = true;
                    }
                    else {
                        document.getElementById('btn_enable_production_mode_confirm').disabled = false;
                        document.getElementById('btn_enable_training_mode_confirm').disabled = false;
                        document.getElementById('btn_disabled_mode_confirm').disabled = false;
                    }

                    // notify
                    notify("success", "bottom", 'Behaviour analytic mode has successfully been set to ' + value, "5");

                    // Audit
                    action = "success";
                    change_type = change_type;
                    object = "all";
                    object_category = "all";
                    object_attrs = "definition=\"" + value + "\"";
                    result = "N/A";
                    comment = "N/A";
                    auditRecord(action, change_type, object, object_category, object_attrs, result, comment);

                },
                error: function(xhr, textStatus, error) {
                    message = "Error Updating!" + xhr + textStatus + error;

                    // Audit
                    action = "failure";
                    change_type = change_type;
                    object = "all";
                    object_category = "all";
                    object_attrs = "definition=\"" + value + "\"";
                    result = message;
                    comment = "N/A";
                    auditRecord(action, change_type, object, object_category, object_attrs, result, comment);

                    $("#modal_update_collection_failure_return").find('.modal-error-message p').text(message);
                    $("#modal_update_collection_failure_return").modal()
                }
            });

        }

        function get_data_host_alerting_policy() {

            // Manage buttons states dynamically

            submitTokens();

            // When the Submit button is clicked, get all the form fields by accessing token values
            var tokens = mvc.Components.get("default");

            //
            // Verify the current status
            //

            // Define the query
            var searchQuery = "| makeresults | eval data_host_alerting_policy=`trackme_default_data_host_alert_policy` | fields - _time";

            // Set the search parameters--specify a time range
            var searchParams = {
                earliest_time: "-5m",
                latest_time: "now"
            };

            // Run a oneshot search that returns the job's results
            service.oneshotSearch(
                searchQuery,
                searchParams,
                function(err, results) {

                    // Display the results
                    var fields = results.fields;
                    var rows = results.rows;
                    var current_data_host_alerting_policy;

                    for (var i = 0; i < rows.length; i++) {
                        var values = rows[i];

                        for (var j = 0; j < values.length; j++) {
                            var field = fields[j];

                            if (fields[j] == "data_host_alerting_policy") {
                                current_data_host_alerting_policy = values[j];
                            }
                        }
                    }


                    if (!current_data_host_alerting_policy) {
                        document.getElementById('btn_enable_data_host_policy_per_host').disabled = false;
                        document.getElementById('btn_enable_data_host_policy_per_sourcetype').disabled = false;
                        return;
                    }

                    // Dynamically manage buttons states
                    if (current_data_host_alerting_policy == "track_per_host") {
                        document.getElementById('btn_enable_data_host_policy_per_host').disabled = true;
                        document.getElementById('btn_enable_data_host_policy_per_sourcetype').disabled = false;
                    }
                    else if (current_data_host_alerting_policy == "track_per_sourcetype") {
                        document.getElementById('btn_enable_data_host_policy_per_host').disabled = false;
                        document.getElementById('btn_enable_data_host_policy_per_sourcetype').disabled = true;
                    }
                    else {
                        document.getElementById('btn_enable_data_host_policy_per_host').disabled = false;
                        document.getElementById('btn_enable_data_host_policy_per_sourcetype').disabled = false;
                    }

            });

        }

        // get current status
        get_data_host_alerting_policy();

        //
        // data sampling obfuscation mode
        //

        // Get current mode
        function get_data_sampling_obfuscation_mode() {

            // Manage buttons states dynamically

            submitTokens();

            // When the Submit button is clicked, get all the form fields by accessing token values
            var tokens = mvc.Components.get("default");

            //
            // Verify the current status
            //

            // Define the query
            var searchQuery = "| rest /servicesNS/nobody/trackme/admin/macros/trackme_data_sampling_obfuscation_mode splunk_server=local | fields definition | rex field=definition mode=sed \"s/\`//g\" | rename definition as current_mode";

            // Set the search parameters--specify a time range
            var searchParams = {
                earliest_time: "-5m",
                latest_time: "now"
            };

            // Run a oneshot search that returns the job's results
            service.oneshotSearch(
                searchQuery,
                searchParams,
                function(err, results) {

                    // Display the results
                    var fields = results.fields;
                    var rows = results.rows;
                    var current_mode;

                    for (var i = 0; i < rows.length; i++) {
                        var values = rows[i];

                        for (var j = 0; j < values.length; j++) {
                            var field = fields[j];

                            if (fields[j] == "current_mode") {
                                current_mode = values[j];
                            }
                        }
                    }


                    if (!current_mode) {
                        document.getElementById('btn_data_sampling_obfuscate_enable').disabled = false;
                        document.getElementById('btn_data_sampling_obfuscate_disable').disabled = false;
                        return;
                    }

                    // Dynamically manage buttons states
                    if (current_mode == "trackme_data_sampling_obfuscation_mode_enabled") {
                        document.getElementById('btn_data_sampling_obfuscate_enable').disabled = true;
                        document.getElementById('btn_data_sampling_obfuscate_disable').disabled = false;
                    } else if (current_mode == "trackme_data_sampling_obfuscation_mode_disabled") {
                        document.getElementById('btn_data_sampling_obfuscate_enable').disabled = false;
                        document.getElementById('btn_data_sampling_obfuscate_disable').disabled = true;
                    } else {
                        document.getElementById('btn_data_sampling_obfuscate_enable').disabled = false;
                        document.getElementById('btn_data_sampling_obfuscate_disable').disabled = false;
                    }

                });

            }

        // get current status
        get_data_sampling_obfuscation_mode();

        // Update the data sources mode
        function update_data_sampling_obfuscation_mode(value) {

            var query_url = "/en-US/splunkd/__raw/servicesNS/nobody/trackme/configs/conf-macros/trackme_data_sampling_obfuscation_mode"
            var value = value;

            if (value == "trackme_data_sampling_obfuscation_mode_enabled") {
                change_type = "enable data sampling obfuscation mode";
            } else if (value == "trackme_data_sampling_obfuscation_mode_disabled") {
                change_type = "enable data sampling obfuscation mode";
            } else {
                // default if unset
                change_type = "trackme_data_sampling_obfuscation_mode_disabled";
            }

            $.ajax({
                url: query_url,
                type: "POST",
                async: true,
                contentType: "application/json",
                data: "definition=`" + value + "`",
                success: function(returneddata) {

                    // Update the buttons
                    if (value == "trackme_data_sampling_obfuscation_mode_enabled") {
                        document.getElementById('btn_data_sampling_obfuscate_enable').disabled = true;
                        document.getElementById('btn_data_sampling_obfuscate_disable').disabled = false;
                    } else if (value == "trackme_data_sampling_obfuscation_mode_disabled") {
                        document.getElementById('btn_data_sampling_obfuscate_enable').disabled = false;
                        document.getElementById('btn_data_sampling_obfuscate_disable').disabled = true;
                    } else {
                        document.getElementById('btn_data_sampling_obfuscate_enable').disabled = false;
                        document.getElementById('btn_data_sampling_obfuscate_disable').disabled = false;
                    }

                    // notify
                    notify("success", "bottom", 'Data sampling obfuscation mode has been successfully set to: ' + value, "5");

                    // Audit
                    action = "success";
                    change_type = change_type;
                    object = "all";
                    object_category = "data_source";
                    object_attrs = "definition=\"" + value + "\"";
                    result = "N/A";
                    comment = "N/A";
                    auditRecord(action, change_type, object, object_category, object_attrs, result, comment);

                },
                error: function(xhr, textStatus, error) {
                    message = "Error Updating!" + xhr + textStatus + error;

                    // Audit
                    action = "failure";
                    change_type = change_type;
                    object = "all";
                    object_category = "data_source";
                    object_attrs = "definition=\"" + value + "\"";
                    result = message;
                    comment = "N/A";
                    auditRecord(action, change_type, object, object_category, object_attrs, result, comment);

                    $("#modal_update_collection_failure_return").find('.modal-error-message p').text(message);
                    $("#modal_update_collection_failure_return").modal()
                }
            });

        }

        // Enable mode
        $("#btn_data_sampling_obfuscate_enable").click(function() {
        update_data_sampling_obfuscation_mode("trackme_data_sampling_obfuscation_mode_enabled");
        });

        // Disable mode
        $("#btn_data_sampling_obfuscate_disable").click(function() {
        update_data_sampling_obfuscation_mode("trackme_data_sampling_obfuscation_mode_disabled");
        });

        //
        // data host splunk monitoring
        //

        // Get current mode
        function get_data_host_splunk_monitoring_mode() {

            // Manage buttons states dynamically

            submitTokens();

            // When the Submit button is clicked, get all the form fields by accessing token values
            var tokens = mvc.Components.get("default");

            //
            // Verify the current status
            //

            // Define the query
            var searchQuery = "| rest /servicesNS/nobody/trackme/admin/macros/trackme_tstats_main_filter_for_host splunk_server=local | fields definition | rex field=definition mode=sed \"s/\`//g\" | rename definition as current_mode";

            // Set the search parameters--specify a time range
            var searchParams = {
                earliest_time: "-5m",
                latest_time: "now"
            };

            // Run a oneshot search that returns the job's results
            service.oneshotSearch(
                searchQuery,
                searchParams,
                function(err, results) {

                    // Display the results
                    var fields = results.fields;
                    var rows = results.rows;
                    var current_mode;

                    for (var i = 0; i < rows.length; i++) {
                        var values = rows[i];

                        for (var j = 0; j < values.length; j++) {
                            var field = fields[j];

                            if (fields[j] == "current_mode") {
                                current_mode = values[j];
                            }
                        }
                    }


                    if (!current_mode) {
                        document.getElementById('btn_enable_data_host_splunkd').disabled = false;
                        document.getElementById('btn_disable_data_host_splunkd').disabled = false;
                        return;
                    }

                    // Dynamically manage buttons states
                    if (current_mode == "trackme_tstats_root_include_splunkd") {
                        document.getElementById('btn_enable_data_host_splunkd').disabled = true;
                        document.getElementById('btn_disable_data_host_splunkd').disabled = false;
                    } else if (current_mode == "trackme_tstats_root_exclude_splunkd") {
                        document.getElementById('btn_enable_data_host_splunkd').disabled = false;
                        document.getElementById('btn_disable_data_host_splunkd').disabled = true;
                    } else {
                        document.getElementById('btn_enable_data_host_splunkd').disabled = false;
                        document.getElementById('btn_disable_data_host_splunkd').disabled = false;
                    }

                });

            }

        // get current status
        get_data_host_splunk_monitoring_mode();

        // Update the data sources mode
        function update_data_host_splunk_monitoring_mode(value) {

            var query_url = "/en-US/splunkd/__raw/servicesNS/nobody/trackme/configs/conf-macros/trackme_tstats_main_filter_for_host"
            var value = value;

            if (value == "trackme_tstats_root_include_splunkd") {
                change_type = "enable data host Splunk monitoring";
            } else if (value == "trackme_tstats_root_exclude_splunkd") {
                change_type = "disable data host Splunk monitoring";
            } else {
                // default if unset
                change_type = "trackme_tstats_root_include_splunkd";
            }

            $.ajax({
                url: query_url,
                type: "POST",
                async: true,
                contentType: "application/json",
                data: "definition=`" + value + "`",
                success: function(returneddata) {

                    // Update the buttons
                    if (value == "trackme_tstats_root_include_splunkd") {
                        document.getElementById('btn_enable_data_host_splunkd').disabled = true;
                        document.getElementById('btn_disable_data_host_splunkd').disabled = false;
                    } else if (value == "trackme_tstats_root_exclude_splunkd") {
                        document.getElementById('btn_enable_data_host_splunkd').disabled = false;
                        document.getElementById('btn_disable_data_host_splunkd').disabled = true;
                    } else {
                        document.getElementById('btn_enable_data_host_splunkd').disabled = false;
                        document.getElementById('btn_disable_data_host_splunkd').disabled = false;
                    }

                    // notify
                    notify("success", "bottom", 'Data host Splunk monitoring mode has been successfully set to: ' + value, "5");                    

                    // Audit
                    action = "success";
                    change_type = change_type;
                    object = "all";
                    object_category = "data_source";
                    object_attrs = "definition=\"" + value + "\"";
                    result = "N/A";
                    comment = "N/A";
                    auditRecord(action, change_type, object, object_category, object_attrs, result, comment);

                },
                error: function(xhr, textStatus, error) {
                    message = "Error Updating!" + xhr + textStatus + error;

                    // Audit
                    action = "failure";
                    change_type = change_type;
                    object = "all";
                    object_category = "data_source";
                    object_attrs = "definition=\"" + value + "\"";
                    result = message;
                    comment = "N/A";
                    auditRecord(action, change_type, object, object_category, object_attrs, result, comment);

                    $("#modal_update_collection_failure_return").find('.modal-error-message p').text(message);
                    $("#modal_update_collection_failure_return").modal()
                }
            });

        }

        // Enable mode
        $("#btn_enable_data_host_splunkd").click(function() {
            update_data_host_splunk_monitoring_mode("trackme_tstats_root_include_splunkd");
        });

        // Disable mode
        $("#btn_disable_data_host_splunkd").click(function() {
            update_data_host_splunk_monitoring_mode("trackme_tstats_root_exclude_splunkd");
        });

        //
        // data source mode
        //

        // Get current data sources mode
        function get_data_source_mode() {

            // Manage buttons states dynamically

            submitTokens();

            // When the Submit button is clicked, get all the form fields by accessing token values
            var tokens = mvc.Components.get("default");

            //
            // Verify the current status
            //

            // Define the query
            var searchQuery = "| rest /servicesNS/nobody/trackme/admin/macros/trackme_default_data_source_mode splunk_server=local | fields definition | rex field=definition mode=sed \"s/\`//g\" | rename definition as current_data_source_mode";

            // Set the search parameters--specify a time range
            var searchParams = {
                earliest_time: "-5m",
                latest_time: "now"
            };

            // Run a oneshot search that returns the job's results
            service.oneshotSearch(
                searchQuery,
                searchParams,
                function(err, results) {

                    // Display the results
                    var fields = results.fields;
                    var rows = results.rows;
                    var current_data_source_mode;

                    for (var i = 0; i < rows.length; i++) {
                        var values = rows[i];

                        for (var j = 0; j < values.length; j++) {
                            var field = fields[j];

                            if (fields[j] == "current_data_source_mode") {
                                current_data_source_mode = values[j];
                            }
                        }
                    }


                    if (!current_data_source_mode) {
                        document.getElementById('btn_enable_data_source_split_mode').disabled = false;
                        document.getElementById('btn_enable_data_source_split_by_custom_mode').disabled = false;
                        document.getElementById('btn_enable_data_source_merged_mode').disabled = false;
                        document.getElementById('btn_enable_data_source_cribl_mode').disabled = false;
                        return;
                    }

                    // Dynamically manage buttons states
                    if (current_data_source_mode == "trackme_data_source_split_mode") {
                        document.getElementById('btn_enable_data_source_split_mode').disabled = true;
                        document.getElementById('btn_enable_data_source_split_by_custom_mode').disabled = false;
                        document.getElementById('btn_enable_data_source_merged_mode').disabled = false;
                        document.getElementById('btn_enable_data_source_cribl_mode').disabled = false;
                    }
                    else if (current_data_source_mode.includes("trackme_data_source_split_bycustom_mode")) {
                        document.getElementById('btn_enable_data_source_split_mode').disabled = false;
                        document.getElementById('btn_enable_data_source_split_by_custom_mode').disabled = true;                        
                        document.getElementById('btn_enable_data_source_merged_mode').disabled = false;
                        document.getElementById('btn_enable_data_source_cribl_mode').disabled = false;
                    }
                    else if (current_data_source_mode == "trackme_data_source_merged_mode") {
                        document.getElementById('btn_enable_data_source_split_mode').disabled = false;
                        document.getElementById('btn_enable_data_source_split_by_custom_mode').disabled = false;
                        document.getElementById('btn_enable_data_source_merged_mode').disabled = true;
                        document.getElementById('btn_enable_data_source_cribl_mode').disabled = false;
                    }
                    else if (current_data_source_mode == "trackme_data_source_cribl_mode") {
                        document.getElementById('btn_enable_data_source_split_mode').disabled = false;
                        document.getElementById('btn_enable_data_source_split_by_custom_mode').disabled = false;
                        document.getElementById('btn_enable_data_source_merged_mode').disabled = false;
                        document.getElementById('btn_enable_data_source_cribl_mode').disabled = true;
                    }
                    else {
                        document.getElementById('btn_enable_data_source_split_mode').disabled = false;
                        document.getElementById('btn_enable_data_source_split_by_custom_mode').disabled = false;
                        document.getElementById('btn_enable_data_source_merged_mode').disabled = false;
                        document.getElementById('btn_enable_data_source_cribl_mode').disabled = false;
                    }

            });

        }

        // get current status
        get_data_source_mode();

        // Update the data sources mode
        function update_data_source_mode(value, field) {

            var query_url = "/en-US/splunkd/__raw/servicesNS/nobody/trackme/configs/conf-macros/trackme_default_data_source_mode"
            var query_url2 = "/en-US/splunkd/__raw/servicesNS/nobody/trackme/configs/conf-macros/trackme_data_source_tstats_root_splitby"
            var main_splitby_value;
            var root_splitby_value;

            // standard
            if (value == "trackme_data_source_split_mode") {
                main_splitby_value = value;
                change_type = "enable data source split mode";
                root_splitby_value = "trackme_data_source_tstats_root_splitby_regular";
            // split by source
            } else if (value == "trackme_data_source_split_bysource_mode") {
                main_splitby_value = value;
                change_type = "enable data source split by source mode";
                root_splitby_value = "trackme_data_source_tstats_root_splitby_source";
            // split by custom indexed field
            } else if (value.includes("trackme_data_source_split_bycustom_mode")) {
                // update the value in this specific case
                main_splitby_value = "trackme_data_source_split_bycustom_mode(\"" + field + "\")";
                change_type = "enable data source split by custom mode";
                root_splitby_value = "trackme_data_source_tstats_root_splitby_custom(\"" + field + "\")";
            // merged mode
            } else if (value == "trackme_data_source_merged_mode") {
                main_splitby_value = value;
                change_type = "enable data source merged mode";
                root_splitby_value = "trackme_data_source_tstats_root_splitby_regular";
            // cribl mode
            } else if (value == "trackme_data_source_cribl_mode") {
                main_splitby_value = value;
                change_type = "enable data source cribl mode";
                root_splitby_value = "trackme_data_source_tstats_root_splitby_cribl";
            } else {
                // default if unset
                main_splitby_value = value;
                change_type = "trackme_data_source_split_mode";
                root_splitby_value = "trackme_data_source_tstats_root_splitby_regular";
            }

            $.ajax({
                url: query_url,
                type: "POST",
                async: true,
                contentType: "application/json",
                data: "definition=`" + main_splitby_value + "`",
                success: function(returneddata) {

                    $.ajax({
                        url: query_url2,
                        type: "POST",
                        async: true,
                        contentType: "application/json",
                        data: "definition=`" + root_splitby_value + "`",
                        success: function(returneddata) {

                            // notify
                            var msgMode;

                            // Update the buttons
                            if (value == "trackme_data_source_split_mode") {
                                document.getElementById('btn_enable_data_source_split_mode').disabled = true;
                                document.getElementById('btn_enable_data_source_split_by_custom_mode').disabled = false;
                                document.getElementById('btn_enable_data_source_merged_mode').disabled = false;
                                document.getElementById('btn_enable_data_source_cribl_mode').disabled = false;
                                msgMode = "Standard split by mode";
                            } else if (value.includes("trackme_data_source_split_bycustom_mode")) {
                                document.getElementById('btn_enable_data_source_split_mode').disabled = false;
                                document.getElementById('btn_enable_data_source_split_by_custom_mode').disabled = true;
                                document.getElementById('btn_enable_data_source_merged_mode').disabled = false;
                                document.getElementById('btn_enable_data_source_cribl_mode').disabled = false;
                                msgMode = "Split by custom mode";
                            } else if (value == "trackme_data_source_merged_mode") {
                                document.getElementById('btn_enable_data_source_split_mode').disabled = false;
                                document.getElementById('btn_enable_data_source_split_by_custom_mode').disabled = false;
                                document.getElementById('btn_enable_data_source_merged_mode').disabled = true;
                                document.getElementById('btn_enable_data_source_cribl_mode').disabled = false;
                                msgMode = "merged mode";
                            } else if (value == "trackme_data_source_cribl_mode") {
                                document.getElementById('btn_enable_data_source_split_mode').disabled = false;
                                document.getElementById('btn_enable_data_source_split_by_custom_mode').disabled = false;
                                document.getElementById('btn_enable_data_source_merged_mode').disabled = false;
                                document.getElementById('btn_enable_data_source_cribl_mode').disabled = true;
                                msgMode = "Cribl mode";
                            } else {
                                document.getElementById('btn_enable_data_source_split_mode').disabled = false;
                                document.getElementById('btn_enable_data_source_split_by_custom_mode').disabled = false;
                                document.getElementById('btn_enable_data_source_merged_mode').disabled = false;
                                msgMode = "Standard split by mode";
                            }

                            // notify
                            notify("success", "bottom", 'Data source mode has been successfully set to: ' + msgMode, "5");                            

                            // Audit
                            action = "success";
                            change_type = change_type;
                            object = "all";
                            object_category = "data_source";
                            object_attrs = "definition=\"" + value + "\"";
                            result = "N/A";
                            comment = "N/A";
                            auditRecord(action, change_type, object, object_category, object_attrs, result, comment);

                        },
                        error: function(xhr, textStatus, error) {
                            message = "Error Updating!" + xhr + textStatus + error;

                            // Audit
                            action = "failure";
                            change_type = change_type;
                            object = "all";
                            object_category = "data_source";
                            object_attrs = "definition=\"" + value + "\"";
                            result = message;
                            comment = "N/A";
                            auditRecord(action, change_type, object, object_category, object_attrs, result, comment);

                            $("#modal_update_collection_failure_return").find('.modal-error-message p').text(message);
                            $("#modal_update_collection_failure_return").modal()
                        }
                    });

                },
                error: function(xhr, textStatus, error) {
                    message = "Error Updating!" + xhr + textStatus + error;

                    // Audit
                    action = "failure";
                    change_type = change_type;
                    object = "all";
                    object_category = "data_source";
                    object_attrs = "definition=\"" + value + "\"";
                    result = message;
                    comment = "N/A";
                    auditRecord(action, change_type, object, object_category, object_attrs, result, comment);

                    $("#modal_update_collection_failure_return").find('.modal-error-message p').text(message);
                    $("#modal_update_collection_failure_return").modal()
                }
            });

        }

        // Enable data source split mode
        $("#btn_enable_data_source_split_mode").click(function() {
            update_data_source_mode("trackme_data_source_split_mode", "null");
        });

        // custom field, monitors value for custom field
        $(function () {
            $("#input_split_by_custom_field").keyup(function () {
            if ($(this).val() == "") {
                //Check to see if there is any text entered
                // If there is no text within the input then disable the button
                $("#btn_modal_input_split_by_custom_field").prop("disabled", true);
            }
            else if (/(\s|\,|\'|\")/i.test($(this).val())) {
                $("#btn_modal_input_split_by_custom_field").prop("disabled", true);
                notify("error", "bottom", 'An invalid input was detected, a single field must be provided with no special characters', "5");
            } else {
                //If there is text in the input, then enable the button if other conditions are met
                $("#btn_modal_input_split_by_custom_field").prop("disabled", false);
            }
            });
        });

        // Custom split by modal input
        $("#btn_enable_data_source_split_by_custom_mode").click(function() {
            // open modal
            $("#modal_input_split_by_custom").modal()
        });

        // retrieve the input value if confirmed, and proceed
        $("#btn_modal_input_split_by_custom_field").click(function() {
            $("#modal_input_split_by_custom").modal()

            var customField = document.getElementById("input_split_by_custom_field").value;
            if (customField != "" && customField != 'undefined') {
                update_data_source_mode("trackme_data_source_split_bycustom_mode", customField);
            }
        });

        // Enable data source merged mode
        $("#btn_enable_data_source_merged_mode").click(function() {
            update_data_source_mode("trackme_data_source_merged_mode", "null");
        });

        // Enable cribl mode
        $("#btn_enable_data_source_cribl_mode").click(function() {
            update_data_source_mode("trackme_data_source_cribl_mode", "null");
        });

        // Outliers Production / Training mode

        // Enable production mode
        $("#btn_enable_data_host_policy_per_host").click(function() {
            update_data_host_alerting_policy("track_per_host");
        });

        // Enable training mode
        $("#btn_enable_data_host_policy_per_sourcetype").click(function() {
            update_data_host_alerting_policy("track_per_sourcetype");
        });

        function update_data_host_alerting_policy(value) {

            var query_url = "/en-US/splunkd/__raw/servicesNS/nobody/trackme/configs/conf-macros/trackme_default_data_host_alert_policy"
            var value = value;

            if (value == "track_per_host") {
                change_type = "enable data host policy track per host";
            } else if (value == "track_per_sourcetype") {
                change_type = "enable data host policy track per sourcetype";
            }
            else {
                // default if unset
                change_type = "track_per_host";
            }

            $.ajax({
                url: query_url,
                type: "POST",
                async: true,
                contentType: "application/json",
                data: "definition=\"" + value + "\"",
                success: function(returneddata) {

                    // Update the buttons
                    if (value == "track_per_host") {
                        document.getElementById('btn_enable_data_host_policy_per_host').disabled = true;
                        document.getElementById('btn_enable_data_host_policy_per_sourcetype').disabled = false;
                    }
                    else if (value == "track_per_sourcetype") {
                        document.getElementById('btn_enable_data_host_policy_per_host').disabled = false;
                        document.getElementById('btn_enable_data_host_policy_per_sourcetype').disabled = true;
                    }
                    else {
                        document.getElementById('btn_enable_data_host_policy_per_host').disabled = false;
                        document.getElementById('btn_enable_data_host_policy_per_sourcetype').disabled = false;
                    }

                    // notify
                    notify("success", "bottom", 'Data host alerting policy has been successfully set to: ' + value, "5");                    

                    // Audit
                    action = "success";
                    change_type = change_type;
                    object = "all";
                    object_category = "data_host";
                    object_attrs = "definition=\"" + value + "\"";
                    result = "N/A";
                    comment = "N/A";
                    auditRecord(action, change_type, object, object_category, object_attrs, result, comment);

                },
                error: function(xhr, textStatus, error) {
                    message = "Error Updating!" + xhr + textStatus + error;

                    // Audit
                    action = "failure";
                    change_type = change_type;
                    object = "all";
                    object_category = "data_host";
                    object_attrs = "definition=\"" + value + "\"";
                    result = message;
                    comment = "N/A";
                    auditRecord(action, change_type, object, object_category, object_attrs, result, comment);

                    $("#modal_update_collection_failure_return").find('.modal-error-message p').text(message);
                    $("#modal_update_collection_failure_return").modal()
                }
            });

        }

        function get_behaviour_analytic_mode() {

        // Manage buttons states dynamically

        submitTokens();

        // When the Submit button is clicked, get all the form fields by accessing token values
        var tokens = mvc.Components.get("default");

        //
        // Verify the current status
        //

        // Define the query
        var searchQuery = "| makeresults | eval behaviour_analytic_mode=`trackme_system_enable_behaviour_analytic_mode` | fields - _time";

        // Set the search parameters--specify a time range
        var searchParams = {
            earliest_time: "-5m",
            latest_time: "now"
        };

        // Run a oneshot search that returns the job's results
        service.oneshotSearch(
            searchQuery,
            searchParams,
            function(err, results) {

                // Display the results
                var fields = results.fields;
                var rows = results.rows;
                var current_maintenance_mode;
                var current_time_updated;

                for (var i = 0; i < rows.length; i++) {
                    var values = rows[i];

                    for (var j = 0; j < values.length; j++) {
                        var field = fields[j];

                        if (fields[j] == "behaviour_analytic_mode") {
                            current_behaviour_analytic_mode_mode = values[j];
                        }
                    }
                }


                if (!current_behaviour_analytic_mode_mode) {
                    document.getElementById('btn_enable_production_mode_confirm').disabled = false;
                    document.getElementById('btn_enable_training_mode_confirm').disabled = false;
                    document.getElementById('btn_disabled_mode_confirm').disabled = false;
                    return;
                }

                // Dynamically manage buttons states
                if (current_behaviour_analytic_mode_mode == "enabled") {
                    document.getElementById('btn_enable_production_mode_confirm').disabled = true;
                    document.getElementById('btn_enable_training_mode_confirm').disabled = false;
                    document.getElementById('btn_disabled_mode_confirm').disabled = false;
                }
                else if (current_behaviour_analytic_mode_mode == "training") {
                    document.getElementById('btn_enable_production_mode_confirm').disabled = false;
                    document.getElementById('btn_enable_training_mode_confirm').disabled = true;
                    document.getElementById('btn_disabled_mode_confirm').disabled = false;
                }
                else if (current_behaviour_analytic_mode_mode == "disabled") {
                    document.getElementById('btn_enable_production_mode_confirm').disabled = false;
                    document.getElementById('btn_enable_training_mode_confirm').disabled = false;
                    document.getElementById('btn_disabled_mode_confirm').disabled = true;
                }
                else {
                    document.getElementById('btn_enable_production_mode_confirm').disabled = false;
                    document.getElementById('btn_enable_training_mode_confirm').disabled = false;
                    document.getElementById('btn_disabled_mode_confirm').disabled = false;
                }

            });

        }

        // get current status
        get_behaviour_analytic_mode();

        // Enable production mode
        $("#btn_enable_production_mode").click(function() {
            update_behaviour_analytic("enabled");
        });

        // Enable training mode
        $("#btn_enable_training_mode").click(function() {
            update_behaviour_analytic("training");
        });

        // Disable
        $("#btn_disabled_mode").click(function() {
            update_behaviour_analytic("disabled");
        });

        //
        // RESET COLLECTIONS
        //

        // data source

        $("#btn_manage_reset_data_source").click(function() {
            submitTokens();

            // When the Submit button is clicked, get all the form fields by accessing token values
            var tokens = mvc.Components.get("default");

            $("#modal_reset_data_source").modal()

            $("#btn_modal_reset_data_source_confirmed").click(function() {


                // Define the query
                var searchQuery = "| outputlookup trackme_data_source_monitoring";

                // Set the search parameters--specify a time range
                var searchParams = {
                    earliest_time: "-5m",
                    latest_time: "now"
                };

                // Run a normal search that immediately returns the job's SID
                service.search(
                    searchQuery,
                    searchParams,
                    function(err, job) {

                        $("#loadingGray").remove()
                        $("body").append('<div id="loadingGray" style="background: #e9e9e9; display: block; position: fixed; z-index: 100; top: 0; right: 0; bottom: 0; left: 0; height: 100%; opacity: 0.8;"><div style="width: 100%; margin-top: 250px; padding-bottom: 50px; text-align: center;"><p style="font-size: 18pt; font-weight: bolder;">Flushing data source KVstore collection and running short term tracker, please wait...</p></div><div id="spinner"></div></div>')

                        require(["jquery",
                                "/static/app/trackme/spin.js"
                            ],
                            function($,
                                Spinner
                            ) {
                                new Spinner({
                                lines: 12, length: 18,
                                position: "relative", color: "#003b59"
                            }).spin(document.getElementById('spinner'));
                        })

                        function audit_failure() {
                            // Audit failure change
                            var time = (new Date).getTime();
                            var audit_record = {
                                "time": time,
                                "action": "failure",
                                "user": currentUser,
                                "change_type": "reset",
                                "object_category": "data_source",
                                "object": "full_collection"
                            };
                            $.ajax({
                                url: auditendpoint_URl,
                                type: "POST",
                                async: true,
                                contentType: "application/json",
                                data: JSON.stringify(audit_record),
                                success: function(returneddata) {
                                    // Run the search again to update the table
                                }
                            });
                        }

                        // Shall the search fail before we can get properties
                        if (job == null) {
                            let errorStr = "Unknown Error!";
                            if (err && err.data && err.data.messages && err.data.messages[0]['text']) {
                                errorStr = err.data.messages[0]['text'];
                            } else if (err && err.data && err.data.messages) {
                                errorStr = JSON.stringify(err.data.messages);
                            }
                            $("#loadingGray").remove()
                            audit_failure();
                            $("#modal_update_collection_failure_return").find('.modal-error-message p').text(errorStr);
                            $("#modal_update_collection_failure_return").modal()
                        } else {

                            // Poll the status of the search job
                            job.track({
                                period: 200
                            }, {
                                done: function(job) {

                                    // Once the job is done, update all searches

                                    // Define the query
                                    var searchQuery = "| savedsearch \"TrackMe - Data sources availability short term tracker\"";

                                    // Set the search parameters--specify a time range
                                    var searchParams = {
                                        earliest_time: "-4h",
                                        latest_time: "+4h"
                                    };

                                    // Run a normal search that immediately returns the job's SID
                                    service.search(
                                        searchQuery,
                                        searchParams,
                                        function(err, job) {

                                            require(["jquery",
                                                    "/static/app/trackme/spin.js"
                                                ],
                                                function($,
                                                    Spinner
                                                ) {
                                                    new Spinner({
                                                        lines: 12, length: 18,
                                                        position: "relative", color: "#003b59"
                                                    }).spin(document.getElementById('spinner'));
                                                })

                                            // Shall the search fail before we can get properties
                                            if (job == null) {
                                                let errorStr = "Unknown Error!";
                                                if (err && err.data && err.data.messages && err.data.messages[0]['text']) {
                                                    errorStr = err.data.messages[0]['text'];
                                                } else if (err && err.data && err.data.messages) {
                                                    errorStr = JSON.stringify(err.data.messages);
                                                }
                                                $("#loadingGray").remove()
                                                audit_failure();
                                                $("#modal_update_collection_failure_return").find('.modal-error-message p').text(errorStr);
                                                $("#modal_update_collection_failure_return").modal()
                                            } else {

                                                // Poll the status of the search job
                                                job.track({
                                                    period: 200
                                                }, {
                                                    done: function(job) {

                                                        $("#loadingGray").remove()

                                                        // Audit success change
                                                        var time = (new Date).getTime();
                                                        var audit_record = {
                                                            "time": time,
                                                            "action": "success",
                                                            "user": currentUser,
                                                            "change_type": "reset",
                                                            "object_category": "data_source",
                                                            "object": "full_collection"
                                                        };
                                                        $.ajax({
                                                            url: auditendpoint_URl,
                                                            type: "POST",
                                                            async: true,
                                                            contentType: "application/json",
                                                            data: JSON.stringify(audit_record),
                                                            success: function(returneddata) {
                                                                // Run the search again to update the table
                                                            }
                                                        });

                                                        $("#modal_reset_done").modal()

                                                    },
                                                    failed: function(properties) {
                                                        let errorStr = "Unknown Error!";
                                                        if (properties && properties._properties && properties._properties.messages && properties._properties.messages[0]['text']) {
                                                            errorStr = properties._properties.messages[0]['text'];
                                                        } else if (properties && properties._properties && properties._properties.messages) {
                                                            errorStr = JSON.stringify(properties._properties.messages);
                                                        }
                                                        $("#loadingGray").remove()
                                                        audit_failure();
                                                        $("#modal_update_collection_failure_return").find('.modal-error-message p').text(errorStr);
                                                        $("#modal_update_collection_failure_return").modal()
                                                    },
                                                    error: function(err) {
                                                        done(err);
                                                        audit_failure();
                                                        $("#loadingGray").remove()
                                                        $("#modal_update_collection_failure").modal()
                                                    }
                                                });
                                            }
                                        }
                                    );

                                },
                                failed: function(properties) {
                                    let errorStr = "Unknown Error!";
                                    if (properties && properties._properties && properties._properties.messages && properties._properties.messages[0]['text']) {
                                        errorStr = properties._properties.messages[0]['text'];
                                    } else if (properties && properties._properties && properties._properties.messages) {
                                        errorStr = JSON.stringify(properties._properties.messages);
                                    }
                                    $("#loadingGray").remove()
                                    audit_failure();
                                    $("#modal_update_collection_failure_return").find('.modal-error-message p').text(errorStr);
                                    $("#modal_update_collection_failure_return").modal()
                                },
                                error: function(err) {
                                    done(err);
                                    $("#loadingGray").remove()
                                    audit_failure();
                                    $("#modal_update_collection_failure").modal()
                                }
                            });
                        }
                    }
                );

            });

        });

        // data host

        $("#btn_manage_reset_data_host").click(function() {
            submitTokens();

            // When the Submit button is clicked, get all the form fields by accessing token values
            var tokens = mvc.Components.get("default");

            $("#modal_reset_data_host").modal()

            $("#btn_modal_reset_data_host_confirmed").click(function() {


                // Define the query
                var searchQuery = "| outputlookup trackme_host_monitoring";

                // Set the search parameters--specify a time range
                var searchParams = {
                    earliest_time: "-5m",
                    latest_time: "now"
                };

                // Run a normal search that immediately returns the job's SID
                service.search(
                    searchQuery,
                    searchParams,
                    function(err, job) {

                        $("#loadingGray").remove()
                        $("body").append('<div id="loadingGray" style="background: #e9e9e9; display: block; position: fixed; z-index: 100; top: 0; right: 0; bottom: 0; left: 0; height: 100%; opacity: 0.8;"><div style="width: 100%; margin-top: 250px; padding-bottom: 50px; text-align: center;"><p style="font-size: 18pt; font-weight: bolder;">Flushing data hosts KVstore collection and running short term tracker, please wait...</p></div><div id="spinner"></div></div>')

                        require(["jquery",
                                "/static/app/trackme/spin.js"
                            ],
                            function($,
                                Spinner
                            ) {
                                new Spinner({
                                    lines: 12, length: 18,
                                    position: "relative", color: "#003b59"
                                }).spin(document.getElementById('spinner'));
                            })

                        function audit_failure() {
                            // Audit failure change
                            var time = (new Date).getTime();
                            var audit_record = {
                                "time": time,
                                "action": "failure",
                                "user": currentUser,
                                "change_type": "reset",
                                "object_category": "data_host",
                                "object": "full_collection"
                            };
                            $.ajax({
                                url: auditendpoint_URl,
                                type: "POST",
                                async: true,
                                contentType: "application/json",
                                data: JSON.stringify(audit_record),
                                success: function(returneddata) {
                                    // Run the search again to update the table
                                }
                            });
                        }

                        // Shall the search fail before we can get properties
                        if (job == null) {
                            let errorStr = "Unknown Error!";
                            if (err && err.data && err.data.messages && err.data.messages[0]['text']) {
                                errorStr = err.data.messages[0]['text'];
                            } else if (err && err.data && err.data.messages) {
                                errorStr = JSON.stringify(err.data.messages);
                            }
                            $("#loadingGray").remove()
                            audit_failure();
                            $("#modal_update_collection_failure_return").find('.modal-error-message p').text(errorStr);
                            $("#modal_update_collection_failure_return").modal()
                        } else {

                            // Poll the status of the search job
                            job.track({
                                period: 200
                            }, {
                                done: function(job) {

                                    // Once the job is done, update all searches

                                    // Define the query
                                    var searchQuery = "| savedsearch \"TrackMe - hosts availability short term tracker\"";

                                    // Set the search parameters--specify a time range
                                    var searchParams = {
                                        earliest_time: "-4h",
                                        latest_time: "+4h"
                                    };

                                    // Run a normal search that immediately returns the job's SID
                                    service.search(
                                        searchQuery,
                                        searchParams,
                                        function(err, job) {

                                            require(["jquery",
                                                    "/static/app/trackme/spin.js"
                                                ],
                                                function($,
                                                    Spinner
                                                ) {
                                                    new Spinner({
                                                        lines: 12, length: 18,
                                                        position: "relative", color: "#003b59"
                                                    }).spin(document.getElementById('spinner'));
                                                })

                                            // Shall the search fail before we can get properties
                                            if (job == null) {
                                                let errorStr = "Unknown Error!";
                                                if (err && err.data && err.data.messages && err.data.messages[0]['text']) {
                                                    errorStr = err.data.messages[0]['text'];
                                                } else if (err && err.data && err.data.messages) {
                                                    errorStr = JSON.stringify(err.data.messages);
                                                }
                                                $("#loadingGray").remove()
                                                audit_failure();
                                                $("#modal_update_collection_failure_return").find('.modal-error-message p').text(errorStr);
                                                $("#modal_update_collection_failure_return").modal()
                                            } else {

                                                // Poll the status of the search job
                                                job.track({
                                                    period: 200
                                                }, {
                                                    done: function(job) {

                                                        // Audit success change
                                                        var time = (new Date).getTime();
                                                        var audit_record = {
                                                            "time": time,
                                                            "action": "success",
                                                            "user": currentUser,
                                                            "change_type": "reset",
                                                            "object_category": "data_host",
                                                            "object": "full_collection"
                                                        };
                                                        $.ajax({
                                                            url: auditendpoint_URl,
                                                            type: "POST",
                                                            async: true,
                                                            contentType: "application/json",
                                                            data: JSON.stringify(audit_record),
                                                            success: function(returneddata) {
                                                                // Run the search again to update the table
                                                            }
                                                        });

                                                        $("#loadingGray").remove()
                                                        $("#modal_reset_done").modal()

                                                    },
                                                    failed: function(properties) {
                                                        let errorStr = "Unknown Error!";
                                                        if (properties && properties._properties && properties._properties.messages && properties._properties.messages[0]['text']) {
                                                            errorStr = properties._properties.messages[0]['text'];
                                                        } else if (properties && properties._properties && properties._properties.messages) {
                                                            errorStr = JSON.stringify(properties._properties.messages);
                                                        }
                                                        $("#loadingGray").remove()
                                                        audit_failure();
                                                        $("#modal_update_collection_failure_return").find('.modal-error-message p').text(errorStr);
                                                        $("#modal_update_collection_failure_return").modal()
                                                    },
                                                    error: function(err) {
                                                        done(err);
                                                        $("#loadingGray").remove()
                                                        audit_failure();
                                                        $("#modal_update_collection_failure").modal()
                                                    }
                                                });
                                            }
                                        }
                                    );

                                },
                                failed: function(properties) {
                                    let errorStr = "Unknown Error!";
                                    if (properties && properties._properties && properties._properties.messages && properties._properties.messages[0]['text']) {
                                        errorStr = properties._properties.messages[0]['text'];
                                    } else if (properties && properties._properties && properties._properties.messages) {
                                        errorStr = JSON.stringify(properties._properties.messages);
                                    }
                                    $("#loadingGray").remove()
                                    audit_failure();
                                    $("#modal_update_collection_failure_return").find('.modal-error-message p').text(errorStr);
                                    $("#modal_update_collection_failure_return").modal()
                                },
                                error: function(err) {
                                    done(err);
                                    $("#loadingGray").remove()
                                    audit_failure();
                                    $("#modal_update_collection_failure").modal()
                                }
                            });
                        }
                    }
                );

            });

        });

        // metric host

        // reset collection
        $("#btn_manage_reset_metric_host").click(function() {
            submitTokens();

            // When the Submit button is clicked, get all the form fields by accessing token values
            var tokens = mvc.Components.get("default");

            $("#modal_reset_metric_host").modal()

            $("#btn_modal_reset_metric_host_confirmed").click(function() {


                // Define the query
                var searchQuery = "| outputlookup trackme_metric_host_monitoring";

                // Set the search parameters--specify a time range
                var searchParams = {
                    earliest_time: "-5m",
                    latest_time: "now"
                };

                // Run a normal search that immediately returns the job's SID
                service.search(
                    searchQuery,
                    searchParams,
                    function(err, job) {

                        $("#loadingGray").remove()
                        $("body").append('<div id="loadingGray" style="background: #e9e9e9; display: block; position: fixed; z-index: 100; top: 0; right: 0; bottom: 0; left: 0; height: 100%; opacity: 0.8;"><div style="width: 100%; margin-top: 250px; padding-bottom: 50px; text-align: center;"><p style="font-size: 18pt; font-weight: bolder;">Flushing metric hosts KVstore collection and running metric tracker, please wait...</p></div><div id="spinner"></div></div>')

                        require(["jquery",
                                "/static/app/trackme/spin.js"
                            ],
                            function($,
                                Spinner
                            ) {
                                new Spinner({
                                lines: 12, length: 18,
                                position: "relative", color: "#003b59"
                                }).spin(document.getElementById('spinner'));
                            })

                        function audit_failure() {
                            // Audit failure change
                            var time = (new Date).getTime();
                            var audit_record = {
                                "time": time,
                                "action": "failure",
                                "user": currentUser,
                                "change_type": "reset",
                                "object_category": "data_host",
                                "object": "full_collection"
                            };
                            $.ajax({
                                url: auditendpoint_URl,
                                type: "POST",
                                async: true,
                                contentType: "application/json",
                                data: JSON.stringify(audit_record),
                                success: function(returneddata) {
                                    // Run the search again to update the table
                                }
                            });
                        }

                        // Shall the search fail before we can get properties
                        if (job == null) {
                            let errorStr = "Unknown Error!";
                            if (err && err.data && err.data.messages && err.data.messages[0]['text']) {
                                errorStr = err.data.messages[0]['text'];
                            } else if (err && err.data && err.data.messages) {
                                errorStr = JSON.stringify(err.data.messages);
                            }
                            $("#loadingGray").remove()
                            audit_failure();
                            $("#modal_update_collection_failure_return").find('.modal-error-message p').text(errorStr);
                            $("#modal_update_collection_failure_return").modal()
                        } else {

                            // Poll the status of the search job
                            job.track({
                                period: 200
                            }, {
                                done: function(job) {

                                    // Once the job is done, update all searches

                                    // Define the query
                                    var searchQuery = "| savedsearch \"TrackMe - metric hosts availability tracker\"";

                                    // Set the search parameters--specify a time range
                                    var searchParams = {
                                        earliest_time: "-5m",
                                        latest_time: "now"
                                    };

                                    // Run a normal search that immediately returns the job's SID
                                    service.search(
                                        searchQuery,
                                        searchParams,
                                        function(err, job) {

                                            require(["jquery",
                                                    "/static/app/trackme/spin.js"
                                                ],
                                                function($,
                                                    Spinner
                                                ) {
                                                    new Spinner({
                                                        lines: 12, length: 18,
                                                        position: "relative", color: "#003b59"
                                                    }).spin(document.getElementById('spinner'));
                                                })

                                            // Shall the search fail before we can get properties
                                            if (job == null) {
                                                let errorStr = "Unknown Error!";
                                                if (err && err.data && err.data.messages && err.data.messages[0]['text']) {
                                                    errorStr = err.data.messages[0]['text'];
                                                } else if (err && err.data && err.data.messages) {
                                                    errorStr = JSON.stringify(err.data.messages);
                                                }
                                                $("#loadingGray").remove()
                                                audit_failure();
                                                $("#modal_update_collection_failure_return").find('.modal-error-message p').text(errorStr);
                                                $("#modal_update_collection_failure_return").modal()
                                            } else {

                                                // Poll the status of the search job
                                                job.track({
                                                    period: 200
                                                }, {
                                                    done: function(job) {

                                                        // Audit success change
                                                        var time = (new Date).getTime();
                                                        var audit_record = {
                                                            "time": time,
                                                            "action": "success",
                                                            "user": currentUser,
                                                            "change_type": "reset",
                                                            "object_category": "metric_host",
                                                            "object": "full_collection"
                                                        };
                                                        $.ajax({
                                                            url: auditendpoint_URl,
                                                            type: "POST",
                                                            async: true,
                                                            contentType: "application/json",
                                                            data: JSON.stringify(audit_record),
                                                            success: function(returneddata) {
                                                                // Run the search again to update the table
                                                            }
                                                        });

                                                        $("#loadingGray").remove()
                                                        $("#modal_reset_done").modal()

                                                    },
                                                    failed: function(properties) {
                                                        let errorStr = "Unknown Error!";
                                                        if (properties && properties._properties && properties._properties.messages && properties._properties.messages[0]['text']) {
                                                            errorStr = properties._properties.messages[0]['text'];
                                                        } else if (properties && properties._properties && properties._properties.messages) {
                                                            errorStr = JSON.stringify(properties._properties.messages);
                                                        }
                                                        $("#loadingGray").remove()
                                                        audit_failure();
                                                        $("#modal_update_collection_failure_return").find('.modal-error-message p').text(errorStr);
                                                        $("#modal_update_collection_failure_return").modal()
                                                    },
                                                    error: function(err) {
                                                        done(err);
                                                        $("#loadingGray").remove()
                                                        audit_failure();
                                                        $("#modal_update_collection_failure").modal()
                                                    }
                                                });
                                            }
                                        }
                                    );

                                },
                                failed: function(properties) {
                                    let errorStr = "Unknown Error!";
                                    if (properties && properties._properties && properties._properties.messages && properties._properties.messages[0]['text']) {
                                        errorStr = properties._properties.messages[0]['text'];
                                    } else if (properties && properties._properties && properties._properties.messages) {
                                        errorStr = JSON.stringify(properties._properties.messages);
                                    }
                                    $("#loadingGray").remove()
                                    audit_failure();
                                    $("#modal_update_collection_failure_return").find('.modal-error-message p').text(errorStr);
                                    $("#modal_update_collection_failure_return").modal()
                                },
                                error: function(err) {
                                    done(err);
                                    $("#loadingGray").remove()
                                    audit_failure();
                                    $("#modal_update_collection_failure").modal()
                                }
                            });
                        }
                    }
                );

            });

        });

        //
        // RUN TRACKERS
        //

        //
        // UPDATE COLLECTION
        //

        // Call this function when the Update collection button is clicked

        $("#btn_run_tracker").click(function() {
            submitTokens();

            // When the Submit button is clicked, get all the form fields by accessing token values
            var tokens = mvc.Components.get("default");


            // Define the query
            var searchQuery = "| savedsearch \"TrackMe - Data sources availability short term tracker\"";

            // Set the search parameters--specify a time range
            var searchParams = {
                earliest_time: "-4h",
                latest_time: "now"
            };

            // Run a normal search that immediately returns the job's SID
            service.search(
                searchQuery,
                searchParams,
                function(err, job) {

                    $("#loadingGray").remove()
                    $("body").append('<div id="loadingGray" style="background: #e9e9e9; display: block; position: fixed; z-index: 100; top: 0; right: 0; bottom: 0; left: 0; height: 100%; opacity: 0.8;"><div style="width: 100%; margin-top: 250px; padding-bottom: 50px; text-align: center;"><p style="font-size: 18pt; font-weight: bolder;">Running the data sources short term tracker...</p></div><div id="spinner"></div></div>')

                    require(["jquery",
                            "/static/app/trackme/spin.js"
                        ],
                        function($,
                            Spinner
                        ) {
                            new Spinner({
                                lines: 12, length: 18,
                                position: "relative", color: "#003b59"
                            }).spin(document.getElementById('spinner'));
                        })

                    // Shall the search fail before we can get properties
                    if (job == null) {
                        let errorStr = "Unknown Error!";
                        if (err && err.data && err.data.messages && err.data.messages[0]['text']) {
                            errorStr = err.data.messages[0]['text'];
                        } else if (err && err.data && err.data.messages) {
                            errorStr = JSON.stringify(err.data.messages);
                        }
                        $("#loadingGray").remove()
                        $("#modal_update_collection_failure_return").find('.modal-error-message p').text(errorStr);
                        $("#modal_update_collection_failure_return").modal()
                    } else {

                        // Poll the status of the search job
                        job.track({
                            period: 200
                        }, {
                            done: function(job) {

                                $("#loadingGray").remove()
                                $("#modal_update_collection_done").modal()

                            },
                            failed: function(properties) {
                                let errorStr = "Unknown Error!";
                                if (properties && properties._properties && properties._properties.messages && properties._properties.messages[0]['text']) {
                                    errorStr = properties._properties.messages[0]['text'];
                                } else if (properties && properties._properties && properties._properties.messages) {
                                    errorStr = JSON.stringify(properties._properties.messages);
                                }
                                $("#loadingGray").remove()
                                $("#modal_update_collection_failure_return").find('.modal-error-message p').text(errorStr);
                                $("#modal_update_collection_failure_return").modal()
                            },
                            error: function(err) {
                                done(err);
                                $("#loadingGray").remove()
                                $("#modal_update_collection_failure").modal()
                            }
                        });
                    }
                }
            );

        });

        $("#btn_run_tracker_host").click(function() {
            submitTokens();

            // When the Submit button is clicked, get all the form fields by accessing token values
            var tokens = mvc.Components.get("default");


            // Define the query
            var searchQuery = "| savedsearch \"TrackMe - hosts availability short term tracker\"";

            // Set the search parameters--specify a time range
            var searchParams = {
                earliest_time: "-4h",
                latest_time: "now"
            };

            // Run a normal search that immediately returns the job's SID
            service.search(
                searchQuery,
                searchParams,
                function(err, job) {

                    $("#loadingGray").remove()
                    $("body").append('<div id="loadingGray" style="background: #e9e9e9; display: block; position: fixed; z-index: 100; top: 0; right: 0; bottom: 0; left: 0; height: 100%; opacity: 0.8;"><div style="width: 100%; margin-top: 250px; padding-bottom: 50px; text-align: center;"><p style="font-size: 18pt; font-weight: bolder;">Running the host short term tracker...</p></div><div id="spinner"></div></div>')

                    require(["jquery",
                            "/static/app/trackme/spin.js"
                        ],
                        function($,
                            Spinner
                        ) {
                            new Spinner({
                                lines: 12, length: 18,
                                position: "relative", color: "#003b59"
                            }).spin(document.getElementById('spinner'));
                        })

                    // Shall the search fail before we can get properties
                    if (job == null) {
                        let errorStr = "Unknown Error!";
                        if (err && err.data && err.data.messages && err.data.messages[0]['text']) {
                            errorStr = err.data.messages[0]['text'];
                        } else if (err && err.data && err.data.messages) {
                            errorStr = JSON.stringify(err.data.messages);
                        }
                        $("#loadingGray").remove()
                        $("#modal_update_collection_failure_return").find('.modal-error-message p').text(errorStr);
                        $("#modal_update_collection_failure_return").modal()
                    } else {

                        // Poll the status of the search job
                        job.track({
                            period: 200
                        }, {
                            done: function(job) {

                                $("#loadingGray").remove()
                                $("#modal_update_collection_done").modal()

                            },
                            failed: function(properties) {
                                let errorStr = "Unknown Error!";
                                if (properties && properties._properties && properties._properties.messages && properties._properties.messages[0]['text']) {
                                    errorStr = properties._properties.messages[0]['text'];
                                } else if (properties && properties._properties && properties._properties.messages) {
                                    errorStr = JSON.stringify(properties._properties.messages);
                                }
                                $("#loadingGray").remove()
                                $("#modal_update_collection_failure_return").find('.modal-error-message p').text(errorStr);
                                $("#modal_update_collection_failure_return").modal()
                            },
                            error: function(err) {
                                done(err);
                                $("#loadingGray").remove()
                                $("#modal_update_collection_failure").modal()
                            }
                        });
                    }
                }
            );

        });

        // Show main

        DashboardController.onReady(function() {
            if (!submittedTokenModel.has('earliest') && !submittedTokenModel.has('latest')) {
                submittedTokenModel.set({
                    earliest: '0',
                    latest: ''
                });
            }
        });

        // Initialize time tokens to default
        if (!defaultTokenModel.has('earliest') && !defaultTokenModel.has('latest')) {
            defaultTokenModel.set({
                earliest: '0',
                latest: ''
            });
        }

        if (!_.isEmpty(urlTokenModel.toJSON())) {
            submitTokens();
        }


        //
        // DASHBOARD READY
        //

        DashboardController.ready();
        pageLoading = false;

    }
);
// ]]>
</script>
<script>
$(".btn").mouseup(function(){
    $(this).blur();
})
</script>
<script>
$('.modal').on('show.bs.modal', function () {
    $('.modal').not($(this)).each(function () {
        $(this).modal('hide');
    });
});
</script>
</body>
</html>
}
