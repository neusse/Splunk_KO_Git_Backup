{
	"author": "admin",
	"disabled": "0",
	"eai:acl.app": "trackme",
	"eai:acl.can_change_perms": "1",
	"eai:acl.can_list": "1",
	"eai:acl.can_share_app": "1",
	"eai:acl.can_share_global": "1",
	"eai:acl.can_share_user": "0",
	"eai:acl.can_write": "1",
	"eai:acl.modifiable": "1",
	"eai:acl.owner": "admin",
	"eai:acl.perms.read": "*",
	"eai:acl.perms.write": "['admin', 'trackme_admin']",
	"eai:acl.removable": "0",
	"eai:acl.sharing": "global",
	"eai:appName": "trackme",
	"eai:userName": "nobody",
	"iseval": "0",
	"published": "",
	"splunk_server": "TheNeusse",
	"target": "admin/macros",
	"title": "trackme_summary_investigator_abstract",
	"updated": "1969-12-31T16:00:00-08:00",
	"definition": 
`comment("#### Lookup outlier configuration ####")`
| lookup trackme_data_source_monitoring data_name as object, object_category OUTPUTNEW OutlierTimePeriod, OutlierLowerThresholdMultiplier, OutlierUpperThresholdMultiplier, OutlierAlertOnUpper, OutlierMinEventCount, enable_behaviour_analytic
| lookup trackme_host_monitoring data_host as object, object_category OUTPUTNEW OutlierTimePeriod, OutlierLowerThresholdMultiplier, OutlierUpperThresholdMultiplier, OutlierAlertOnUpper, OutlierMinEventCount, enable_behaviour_analytic

`comment("#### Restrict calculations to the OutlierTimePeriod ####")`
| eval data_eventcount=if(_time>=relative_time(now(), OutlierTimePeriod), data_eventcount, "")

`comment("#### Perform standard deviation calculation of event counts registered ####")`
| eventstats avg("data_eventcount") as avg stdev("data_eventcount") as stdev by object_category, object

`comment("#### Define the default outlier threshold multiplier ####")`
| eval OutlierLowerThresholdMultiplier=if(isnum(OutlierLowerThresholdMultiplier), OutlierLowerThresholdMultiplier, `trackme_default_outlier_threshold_multiplier`)
| eval OutlierUpperThresholdMultiplier=if(isnum(OutlierUpperThresholdMultiplier), OutlierUpperThresholdMultiplier, `trackme_default_outlier_threshold_multiplier`)

`comment("#### Lower bound and Upper bound calculation ####")`
| eval lowerBound=(avg-stdev*exact(OutlierLowerThresholdMultiplier)), upperBound=(avg+stdev*exact(OutlierUpperThresholdMultiplier))

`comment("#### Lower bound cannot be negative ####")`
| eval lowerBound=if(lowerBound<0, 0, lowerBound)

`comment("#### if OutlierMinEventCount is used, then lowerbound becomes a static value ####")`
| eval lowerBound=if(isnum(OutlierMinEventCount) AND OutlierMinEventCount>0, OutlierMinEventCount, lowerBound)

`comment("#### In the context of event count behaviour analytic, we care about outliers that are below the lower bound detection ####")`
| eval OutlierMinEventCount=if(isnum(OutlierMinEventCount), OutlierMinEventCount, 0)
| eval isOutlier=if('data_eventcount' < lowerBound OR 'data_eventcount' < OutlierMinEventCount, 1, 0)
`comment("#### Define status regarding upperBound ####")`
| eval isOutlier=if('data_eventcount' > upperBound AND match(OutlierAlertOnUpper, "^true$"), 1, isOutlier)

`comment("#### Register the latest values ####")`
| stats max(data_tracker_runtime) as data_tracker_runtime, latest(isOutlier) as isOutlier,
first(OutlierTimePeriod) as OutlierTimePeriod,
first(OutlierMinEventCount) as OutlierMinEventCount,
first(OutlierLowerThresholdMultiplier) as OutlierLowerThresholdMultiplier, first(OutlierUpperThresholdMultiplier) as OutlierUpperThresholdMultiplier,
first(OutlierAlertOnUpper) as OutlierAlertOnUpper,
first(enable_behaviour_analytic) as enable_behaviour_analytic
latest(lowerBound) as lowerBound, latest(upperBound) as upperBound, latest(stdev) as stdev by object_category, object

`comment("#### Store current time ####")`
| eval update_time=now()
}
