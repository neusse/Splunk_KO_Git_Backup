{
	"args": "object_category, object, key, minmultiplier, uppermultiplier, mineventcount, span",
	"author": "admin",
	"disabled": "0",
	"eai:acl.app": "trackme",
	"eai:acl.can_change_perms": "1",
	"eai:acl.can_list": "1",
	"eai:acl.can_share_app": "1",
	"eai:acl.can_share_global": "1",
	"eai:acl.can_share_user": "0",
	"eai:acl.can_write": "1",
	"eai:acl.modifiable": "1",
	"eai:acl.owner": "admin",
	"eai:acl.perms.read": "*",
	"eai:acl.perms.write": "['admin', 'trackme_admin']",
	"eai:acl.removable": "0",
	"eai:acl.sharing": "global",
	"eai:appName": "trackme",
	"eai:userName": "nobody",
	"iseval": "0",
	"published": "",
	"splunk_server": "TheNeusse",
	"target": "admin/macros",
	"title": "trackme_outlier_chart_simulate(7)",
	"updated": "1969-12-31T16:00:00-08:00",
	"definition": 
mstats max(_value) as eventcount_4h_span where `trackme_metrics_idx` metric_name=trackme.eventcount_4h object_category="$object_category$" object="$object$" by object_category, object span=$span$
`comment("#### Summary data is loaded ####")`

`comment("#### Positive numerical only ####")`
| where eventcount_4h_span>0

`comment("#### Perform standard deviation calculation of event counts registered ####")`
| append [ | mstats stdev(trackme.eventcount_4h) as stdev, avg(trackme.eventcount_4h) as avg where `trackme_metrics_idx` object_category="$object_category$" object="$object$" by object_category, object ]
| eventstats first(stdev) as stdev, first(avg) as avg by object_category, object
| stats first(eventcount_4h_span) as eventcount_4h_span, first(stdev) as stdev, first(avg) as avg by _time

`comment("#### Define OutlierMinEventCount ####")`
| eval OutlierMinEventCount=if(isnum($mineventcount$), $mineventcount$, 0)

`comment("#### Lower bound and Upper bound calculation ####")`
| eval lowerBound=(avg-stdev*exact($minmultiplier$)), upperBound=(avg+stdev*exact($uppermultiplier$))

`comment("#### Lower bound cannot be negative ####")`
| eval lowerBound=if(lowerBound<0, 0, lowerBound)

`comment("#### if OutlierMinEventCount is used, then lowerbound becomes a static value ####")`
| eval lowerBound=if(OutlierMinEventCount>0, OutlierMinEventCount, lowerBound)

`comment("#### In the context of event count behaviour analytic, we care about outliers that are below the lower bound detection ####")`
| eval isOutlier=if('data_eventcount' < lowerBound, 1, 0)
| eval isOutlier=if('data_eventcount' > upperBound, 1, isOutlier)

`comment("#### Finally, provides the results ####")`
| eval _split_by="$key$"
| table _time, "eventcount_4h_span", lowerBound, upperBound
}
