{
	"allow_skew": "0",
	"author": "nobody",
	"cron_schedule": "",
	"defer_scheduled_searchable_idxc": "0",
	"description": "",
	"disabled": "0",
	"dispatch.allow_partial_results": "1",
	"dispatch.auto_cancel": "0",
	"dispatch.auto_pause": "0",
	"dispatch.buckets": "0",
	"dispatch.earliest_time": "",
	"dispatch.index_earliest": "",
	"dispatch.index_latest": "",
	"dispatch.indexedRealtime": "",
	"dispatch.indexedRealtimeMinSpan": "",
	"dispatch.indexedRealtimeOffset": "",
	"dispatch.latest_time": "",
	"dispatch.lookups": "1",
	"dispatch.max_count": "500000",
	"dispatch.max_time": "0",
	"dispatch.rate_limit_retry": "0",
	"dispatch.reduce_freq": "10",
	"dispatch.rt_backfill": "0",
	"dispatch.rt_maximum_span": "",
	"dispatch.sample_ratio": "1",
	"dispatch.spawn_process": "1",
	"dispatch.time_format": "%FT%T.%Q%:z",
	"dispatch.ttl": "2p",
	"dispatchAs": "owner",
	"eai:acl.app": "Splunk_Security_Essentials",
	"eai:acl.can_change_perms": "1",
	"eai:acl.can_list": "1",
	"eai:acl.can_share_app": "1",
	"eai:acl.can_share_global": "1",
	"eai:acl.can_share_user": "0",
	"eai:acl.can_write": "1",
	"eai:acl.modifiable": "1",
	"eai:acl.owner": "nobody",
	"eai:acl.perms.read": "*",
	"eai:acl.perms.write": "['admin', 'power']",
	"eai:acl.removable": "0",
	"eai:acl.sharing": "app",
	"embed.enabled": "0",
	"is_scheduled": "0",
	"is_visible": "1",
	"max_concurrent": "1",
	"precalculate_required_fields_for_alerts": "1",
	"published": "",
	"realtime_schedule": "1",
	"request.ui_dispatch_app": "",
	"request.ui_dispatch_view": "",
	"restart_on_searchpeer_add": "1",
	"run_n_times": "0",
	"run_on_startup": "0",
	"schedule_as": "auto",
	"schedule_priority": "default",
	"schedule_window": "0",
	"skip_scheduled_realtime_idxc": "0",
	"splunk_server": "TheNeusse",
	"target": "saved/searches",
	"title": "Generate STRT Macros to Data Source Categories Lookup",
	"updated": "1969-12-31T16:00:00-08:00",
	"vsid": "",
	"workload_pool": "",
	"search": 
| inputlookup sse_json_doc_storage_lookup 
| eval len=len(json), key=_key 
| search key="*macros*" 
| table key description version len json 
| spath input=json path="macros{}" output="macros" 
| fields macros 
| mvexpand macros 
| spath input=macros 
| table name definition 
| rename name AS macro

| search definition=*source* OR definition=*eventtype*
| rex field=definition max_match=0 "sourcetype=(\"|)(?<sourcetype>[^\"\s]*)(|\")" 
| rex field=definition max_match=0 "source=(\"|)(?<source>[^\"\s]*)(|\")" 
| eval sourcetype=case(
like(definition,"%eventtype%") AND like(definition,"%cisco_ios%"),"eventtype=cisco_ios",
like(definition,"%eventtype%") AND like(definition,"%osquery-process%"),"osquery:results",
like(definition,"%eventtype%") AND like(definition,"%okta_log%"),"Okta",
1=1,sourcetype
)
| eval source=case(
like(definition,"%eventtype%") AND like(definition,"%wineventlog_security%"),"WinEventLog:Security",
like(definition,"%eventtype%") AND like(definition,"%wineventlog_system%"),"WinEventLog:System",
1=1,source
)
| rex field="sourcetype" max_match=0 
    [| inputlookup SSE-default-data-inventory-products.csv 
    | eval eventtypeId=split(eventtypeId,"|") 
    | mvexpand eventtypeId 
    | search regex_pattern=* 
    | search NOT productId IN (MSSQL*, SQL*,MySQL*, Oracle*, ESXi* , VMWare*, Linux*, FireEye*, Fortinet*, Cylance*, Check*, Juniper*)
    | sort 0 eventtypeId 
    | streamstats count 
    | eval row_id="row_"+count 
    | fields row_id regex_pattern 
    | eval rexValue="(?<P_"+row_id+">"+regex_pattern+")" 
    | head 300 
    | stats values(rexValue) AS regexMerge 
    | eval regexMerge=mvjoin(regexMerge,"|") 
    | eval search="\"(".regexMerge.")\"" 
    | fields search 
        ]
| rex field="sourcetype" max_match=0 
    [| inputlookup SSE-default-data-inventory-products.csv 
    | eval eventtypeId=split(eventtypeId,"|") 
    | mvexpand eventtypeId 
    | search regex_pattern=* 
    | search NOT productId IN (MSSQL*, SQL*,MySQL*, Oracle*, ESXi* , VMWare*, Linux*, FireEye*, Fortinet*, Cylance*, Check*, Juniper*)
    | sort 0 eventtypeId 
    | streamstats count 
    | eval row_id="row_"+count 
    | fields row_id regex_pattern 
    | eval rexValue="(?<P_"+row_id+">"+regex_pattern+")" 
    | tail 300 
    | stats values(rexValue) AS regexMerge 
    | eval regexMerge=mvjoin(regexMerge,"|") 
    | eval search="\"(".regexMerge.")\"" 
    | fields search 
        ]
| rex field="source" max_match=0 
    [| inputlookup SSE-default-data-inventory-products.csv 
    | eval eventtypeId=split(eventtypeId,"|") 
    | mvexpand eventtypeId 
    | search regex_pattern=* 
    | search NOT productId IN (MSSQL*, SQL*,MySQL*, Oracle*, ESXi* , VMWare*, Linux*, FireEye*, Fortinet*, Cylance*, Check*, Juniper*)
    | sort 0 eventtypeId 
    | streamstats count 
    | eval row_id="row_"+count 
    | fields row_id regex_pattern 
    | eval rexValue="(?<P_"+row_id+">"+regex_pattern+")" 
    | head 300 
    | stats values(rexValue) AS regexMerge 
    | eval regexMerge=mvjoin(regexMerge,"|") 
    | eval search="\"(".regexMerge.")\"" 
    | fields search 
        ]
| rex field="source" max_match=0 
    [| inputlookup SSE-default-data-inventory-products.csv 
    | eval eventtypeId=split(eventtypeId,"|") 
    | mvexpand eventtypeId 
    | search regex_pattern=* 
    | search NOT productId IN (MSSQL*, SQL*,MySQL*, Oracle*, ESXi* , VMWare*, Linux*, FireEye*, Fortinet*, Cylance*, Check*, Juniper*)
    | sort 0 eventtypeId 
    | streamstats count 
    | eval row_id="row_"+count 
    | fields row_id regex_pattern 
    | eval rexValue="(?<P_"+row_id+">"+regex_pattern+")" 
    | tail 300 
    | stats values(rexValue) AS regexMerge 
    | eval regexMerge=mvjoin(regexMerge,"|") 
    | eval search="\"(".regexMerge.")\"" 
    | fields search 
        ]
| foreach P_* 
    [| eval PatternStringMatch=if('<<FIELD>>'!="", mvappend(PatternStringMatch,'<<FIELD>>'),PatternStringMatch) 
    | eval PatternStringDescription=if('<<FIELD>>'!="", mvappend(PatternStringDescription,"<<MATCHSTR>>"),PatternStringDescription)
        ] 
| fields - P_*
| join PatternStringDescription type=outer[
| inputlookup SSE-default-data-inventory-products.csv 
    | eval eventtypeId=split(eventtypeId,"|") 
    | mvexpand eventtypeId 
    | search regex_pattern=* 
    | search NOT productId IN (MSSQL*, SQL*,MySQL*, Oracle*, ESXi* , VMWare*, Linux*, FireEye*, Fortinet*, Cylance*, Check*, Juniper*)
    | sort 0 eventtypeId 
    | streamstats count 
    | eval PatternStringDescription="row_"+count 
    
    | fields PatternStringDescription eventtypeId productId
    | eventstats values(eventtypeId) AS eventtypeId  BY productId
    | eval eventtypeId=mvjoin(eventtypeId,"|")
    ]
    | fields - Pattern*
```Filter our matches against non-Vendor specific data source categories. If a detection uses this specific vendor technology it will only rely on that and not of datamodels```
| eval eventtypeId=split(eventtypeId,"|")
| eval eventtypeId_VendorOnly=mvfilter(match(eventtypeId, "Vendor"))
| eval eventtypeId=coalesce(eventtypeId_VendorOnly,eventtypeId)
| fields - eventtypeId_VendorOnly
```END ```
| outputlookup createinapp=t SSE-STRT-macros-to-data_source_categories
}
